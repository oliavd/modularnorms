Prefix(:=<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos>

Declaration(Class(:AND))
Declaration(Class(:AtomicSituation))
Declaration(Class(:Duty))
Declaration(Class(:LNOT))
Declaration(Class(:LogicalSituation))
Declaration(Class(:Norm))
Declaration(Class(:OR))
Declaration(Class(:Right))
Declaration(Class(:Situation))
Declaration(Class(:SuperSituation))
Declaration(ObjectProperty(:_contains))
Declaration(ObjectProperty(:activate))
Declaration(ObjectProperty(:and_))
Declaration(ObjectProperty(:not_))
Declaration(ObjectProperty(:or_))
Declaration(ObjectProperty(:satisfy))
Declaration(DataProperty(:Com))
Declaration(DataProperty(:Inc))
Declaration(DataProperty(:Tol))
Declaration(DataProperty(:Vio))
Declaration(DataProperty(:applicable))
Declaration(DataProperty(:hasAF))
Declaration(DataProperty(:hasAT))
Declaration(DataProperty(:hasAU))
Declaration(DataProperty(:hasID))
Declaration(DataProperty(:hasSF))
Declaration(DataProperty(:hasST))
Declaration(DataProperty(:hasSU))
Declaration(DataProperty(:hohfeldType))
Declaration(DataProperty(:satisfied))




############################
#   Classes
############################

# Class: :AND (:AND)

SubClassOf(:AND :LogicalSituation)

# Class: :AtomicSituation (:AtomicSituation)

SubClassOf(:AtomicSituation :Situation)

# Class: :Duty (:Duty)

SubClassOf(:Duty :Norm)

# Class: :LNOT (:LNOT)

SubClassOf(:LNOT :LogicalSituation)

# Class: :LogicalSituation (:LogicalSituation)

SubClassOf(:LogicalSituation :Situation)

# Class: :OR (:OR)

SubClassOf(:OR :LogicalSituation)

# Class: :Right (:Right)

SubClassOf(:Right :Norm)

# Class: :SuperSituation (:SuperSituation)

SubClassOf(:SuperSituation :Situation)


############################
#   Named Individuals
############################




Declaration(NamedIndividual(:Apache4))
# Individual: :Apache4 (:Apache4)
ClassAssertion(:Right :Apache4)
DataPropertyAssertion(:hasID :Apache4 "Apache4"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4 "4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:"^^xsd:string)
Declaration(NamedIndividual(:Apache4_1))
# Individual: :Apache4_1 (:Apache4_1)
ClassAssertion(:AtomicSituation :Apache4_1)
ObjectPropertyAssertion(:satisfy :Apache4_1 :Apache4)
DataPropertyAssertion(:hasID :Apache4_1 "Apache4_1"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_1 "[You reproduced and distributed] copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:Apache4_2))
# Individual: :Apache4_2 (:Apache4_2)
ClassAssertion(:AND :Apache4_2)
ObjectPropertyAssertion(:activate :Apache4_2 :Apache4)
DataPropertyAssertion(:hasID :Apache4_2 "Apache4_2"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_2 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :Apache4_3 :Apache4a)
Declaration(NamedIndividual(:Apache4_3))
# Individual: :Apache4_3 (:Apache4_3)
ClassAssertion(:SuperSituation :Apache4_3)
ObjectPropertyAssertion(:and_ :Apache4_3 :Apache4_2)
DataPropertyAssertion(:hasID :Apache4_3 "Apache4_3"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_3 "SS_Apache4a"^^xsd:string)
Declaration(NamedIndividual(:Apache4_4))
# Individual: :Apache4_4 (:Apache4_4)
ClassAssertion(:AND :Apache4_4)
ObjectPropertyAssertion(:and_ :Apache4_4 :Apache4_2)
DataPropertyAssertion(:hasID :Apache4_4 "Apache4_4"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_4 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :Apache4_5 :Apache4b)
Declaration(NamedIndividual(:Apache4_5))
# Individual: :Apache4_5 (:Apache4_5)
ClassAssertion(:SuperSituation :Apache4_5)
ObjectPropertyAssertion(:and_ :Apache4_5 :Apache4_4)
DataPropertyAssertion(:hasID :Apache4_5 "Apache4_5"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_5 "SS_Apache4b"^^xsd:string)
Declaration(NamedIndividual(:Apache4_6))
# Individual: :Apache4_6 (:Apache4_6)
ClassAssertion(:AND :Apache4_6)
ObjectPropertyAssertion(:and_ :Apache4_6 :Apache4_4)
DataPropertyAssertion(:hasID :Apache4_6 "Apache4_6"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_6 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :Apache4_7 :Apache4c)
Declaration(NamedIndividual(:Apache4_7))
# Individual: :Apache4_7 (:Apache4_7)
ClassAssertion(:SuperSituation :Apache4_7)
ObjectPropertyAssertion(:and_ :Apache4_7 :Apache4_6)
DataPropertyAssertion(:hasID :Apache4_7 "Apache4_7"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_7 "SS_Apache4c"^^xsd:string)
ObjectPropertyAssertion(:_contains :Apache4_8 :Apache4d)
Declaration(NamedIndividual(:Apache4_8))
# Individual: :Apache4_8 (:Apache4_8)
ClassAssertion(:SuperSituation :Apache4_8)
ObjectPropertyAssertion(:and_ :Apache4_8 :Apache4_6)
DataPropertyAssertion(:hasID :Apache4_8 "Apache4_8"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4_8 "SS_Apache4d"^^xsd:string)


Declaration(NamedIndividual(:Apache4a))
# Individual: :Apache4a (:Apache4a)
ClassAssertion(:Duty :Apache4a)
DataPropertyAssertion(:hasID :Apache4a "Apache4a"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4a "4(a) You must give any other recipients of the Work or Derivative Works a copy of this License;"^^xsd:string)
Declaration(NamedIndividual(:Apache4a_9))
# Individual: :Apache4a_9 (:Apache4a_9)
ClassAssertion(:AtomicSituation :Apache4a_9)
ObjectPropertyAssertion(:satisfy :Apache4a_9 :Apache4a)
DataPropertyAssertion(:hasID :Apache4a_9 "Apache4a_9"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4a_9 "[You gave] other recipients of the Work or Derivative Works a copy of this License"^^xsd:string)
Declaration(NamedIndividual(:Apache4a_10))
# Individual: :Apache4a_10 (:Apache4a_10)
ClassAssertion(:AtomicSituation :Apache4a_10)
ObjectPropertyAssertion(:activate :Apache4a_10 :Apache4a)
DataPropertyAssertion(:hasID :Apache4a_10 "Apache4a_10"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4a_10 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)


Declaration(NamedIndividual(:Apache4b))
# Individual: :Apache4b (:Apache4b)
ClassAssertion(:Duty :Apache4b)
DataPropertyAssertion(:hasID :Apache4b "Apache4b"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4b "4(b) You must cause any modified files to carry prominent notices stating that You changed the files;"^^xsd:string)
Declaration(NamedIndividual(:Apache4b_11))
# Individual: :Apache4b_11 (:Apache4b_11)
ClassAssertion(:AtomicSituation :Apache4b_11)
ObjectPropertyAssertion(:satisfy :Apache4b_11 :Apache4b)
DataPropertyAssertion(:hasID :Apache4b_11 "Apache4b_11"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4b_11 "[You caused] any modified files to carry prominent notices stating that You changed the files"^^xsd:string)
Declaration(NamedIndividual(:Apache4b_12))
# Individual: :Apache4b_12 (:Apache4b_12)
ClassAssertion(:AtomicSituation :Apache4b_12)
ObjectPropertyAssertion(:activate :Apache4b_12 :Apache4b)
DataPropertyAssertion(:hasID :Apache4b_12 "Apache4b_12"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4b_12 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)


Declaration(NamedIndividual(:Apache4c))
# Individual: :Apache4c (:Apache4c)
ClassAssertion(:Duty :Apache4c)
DataPropertyAssertion(:hasID :Apache4c "Apache4c"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4c "4(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works;"^^xsd:string)
Declaration(NamedIndividual(:Apache4c_13))
# Individual: :Apache4c_13 (:Apache4c_13)
ClassAssertion(:AND :Apache4c_13)
ObjectPropertyAssertion(:satisfy :Apache4c_13 :Apache4c)
DataPropertyAssertion(:hasID :Apache4c_13 "Apache4c_13"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4c_13 "and"^^xsd:string)
Declaration(NamedIndividual(:Apache4c_14))
# Individual: :Apache4c_14 (:Apache4c_14)
ClassAssertion(:AtomicSituation :Apache4c_14)
ObjectPropertyAssertion(:and_ :Apache4c_14 :Apache4c_13)
DataPropertyAssertion(:hasID :Apache4c_14 "Apache4c_14"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4c_14 "[You retained], in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work"^^xsd:string)
Declaration(NamedIndividual(:Apache4c_15))
# Individual: :Apache4c_15 (:Apache4c_15)
ClassAssertion(:LNOT :Apache4c_15)
ObjectPropertyAssertion(:and_ :Apache4c_15 :Apache4c_13)
DataPropertyAssertion(:hasID :Apache4c_15 "Apache4c_15"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4c_15 "not"^^xsd:string)
Declaration(NamedIndividual(:Apache4c_16))
# Individual: :Apache4c_16 (:Apache4c_16)
ClassAssertion(:AtomicSituation :Apache4c_16)
ObjectPropertyAssertion(:not_ :Apache4c_16 :Apache4c_15)
DataPropertyAssertion(:hasID :Apache4c_16 "Apache4c_16"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4c_16 "[You retained] those notices that do not pertain to any part of the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:Apache4c_17))
# Individual: :Apache4c_17 (:Apache4c_17)
ClassAssertion(:AtomicSituation :Apache4c_17)
ObjectPropertyAssertion(:activate :Apache4c_17 :Apache4c)
DataPropertyAssertion(:hasID :Apache4c_17 "Apache4c_17"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4c_17 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)


Declaration(NamedIndividual(:Apache4d))
# Individual: :Apache4d (:Apache4d)
ClassAssertion(:Duty :Apache4d)
DataPropertyAssertion(:hasID :Apache4d "Apache4d"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d "4(d) If the Work includes a 'NOTICE' text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License."^^xsd:string)
Declaration(NamedIndividual(:Apache4d_18))
# Individual: :Apache4d_18 (:Apache4d_18)
ClassAssertion(:AND :Apache4d_18)
ObjectPropertyAssertion(:satisfy :Apache4d_18 :Apache4d)
DataPropertyAssertion(:hasID :Apache4d_18 "Apache4d_18"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_18 "and"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_19))
# Individual: :Apache4d_19 (:Apache4d_19)
ClassAssertion(:AND :Apache4d_19)
ObjectPropertyAssertion(:and_ :Apache4d_19 :Apache4d_18)
DataPropertyAssertion(:hasID :Apache4d_19 "Apache4d_19"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_19 "and"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_20))
# Individual: :Apache4d_20 (:Apache4d_20)
ClassAssertion(:AtomicSituation :Apache4d_20)
ObjectPropertyAssertion(:and_ :Apache4d_20 :Apache4d_19)
DataPropertyAssertion(:hasID :Apache4d_20 "Apache4d_20"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_20 "[You included] a readable copy of the attribution notices contained within such NOTICE file"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_21))
# Individual: :Apache4d_21 (:Apache4d_21)
ClassAssertion(:OR :Apache4d_21)
ObjectPropertyAssertion(:and_ :Apache4d_21 :Apache4d_19)
DataPropertyAssertion(:hasID :Apache4d_21 "Apache4d_21"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_21 "or"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_22))
# Individual: :Apache4d_22 (:Apache4d_22)
ClassAssertion(:AtomicSituation :Apache4d_22)
ObjectPropertyAssertion(:or_ :Apache4d_22 :Apache4d_21)
DataPropertyAssertion(:hasID :Apache4d_22 "Apache4d_22"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_22 "[You included the attribution notices] within a NOTICE text file distributed as part of the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_23))
# Individual: :Apache4d_23 (:Apache4d_23)
ClassAssertion(:OR :Apache4d_23)
ObjectPropertyAssertion(:or_ :Apache4d_23 :Apache4d_21)
DataPropertyAssertion(:hasID :Apache4d_23 "Apache4d_23"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_23 "or"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_24))
# Individual: :Apache4d_24 (:Apache4d_24)
ClassAssertion(:OR :Apache4d_24)
ObjectPropertyAssertion(:or_ :Apache4d_24 :Apache4d_23)
DataPropertyAssertion(:hasID :Apache4d_24 "Apache4d_24"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_24 "or"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_25))
# Individual: :Apache4d_25 (:Apache4d_25)
ClassAssertion(:AtomicSituation :Apache4d_25)
ObjectPropertyAssertion(:or_ :Apache4d_25 :Apache4d_24)
DataPropertyAssertion(:hasID :Apache4d_25 "Apache4d_25"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_25 "[You included the attribution notices] within the Source form or documentation"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_26))
# Individual: :Apache4d_26 (:Apache4d_26)
ClassAssertion(:LNOT :Apache4d_26)
ObjectPropertyAssertion(:or_ :Apache4d_26 :Apache4d_24)
DataPropertyAssertion(:hasID :Apache4d_26 "Apache4d_26"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_26 "not"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_27))
# Individual: :Apache4d_27 (:Apache4d_27)
ClassAssertion(:AtomicSituation :Apache4d_27)
ObjectPropertyAssertion(:not_ :Apache4d_27 :Apache4d_26)
DataPropertyAssertion(:hasID :Apache4d_27 "Apache4d_27"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_27 "source [is] provided along with the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_28))
# Individual: :Apache4d_28 (:Apache4d_28)
ClassAssertion(:OR :Apache4d_28)
ObjectPropertyAssertion(:or_ :Apache4d_28 :Apache4d_23)
DataPropertyAssertion(:hasID :Apache4d_28 "Apache4d_28"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_28 "or"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_29))
# Individual: :Apache4d_29 (:Apache4d_29)
ClassAssertion(:AtomicSituation :Apache4d_29)
ObjectPropertyAssertion(:or_ :Apache4d_29 :Apache4d_28)
DataPropertyAssertion(:hasID :Apache4d_29 "Apache4d_29"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_29 "[You included the attribution notices] within a display generated by the Derivative Works ... wherever such third-party notices normally appear"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_30))
# Individual: :Apache4d_30 (:Apache4d_30)
ClassAssertion(:LNOT :Apache4d_30)
ObjectPropertyAssertion(:or_ :Apache4d_30 :Apache4d_28)
DataPropertyAssertion(:hasID :Apache4d_30 "Apache4d_30"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_30 "not"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_31))
# Individual: :Apache4d_31 (:Apache4d_31)
ClassAssertion(:AtomicSituation :Apache4d_31)
ObjectPropertyAssertion(:not_ :Apache4d_31 :Apache4d_30)
DataPropertyAssertion(:hasID :Apache4d_31 "Apache4d_31"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_31 "third-party [attribution] notices normally appear [in display]"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_32))
# Individual: :Apache4d_32 (:Apache4d_32)
ClassAssertion(:AtomicSituation :Apache4d_32)
ObjectPropertyAssertion(:and_ :Apache4d_32 :Apache4d_18)
DataPropertyAssertion(:hasID :Apache4d_32 "Apache4d_32"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_32 "[You excluded] those notices that do not pertain to any part of the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_33))
# Individual: :Apache4d_33 (:Apache4d_33)
ClassAssertion(:AND :Apache4d_33)
ObjectPropertyAssertion(:activate :Apache4d_33 :Apache4d)
DataPropertyAssertion(:hasID :Apache4d_33 "Apache4d_33"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_33 "and"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_34))
# Individual: :Apache4d_34 (:Apache4d_34)
ClassAssertion(:AtomicSituation :Apache4d_34)
ObjectPropertyAssertion(:and_ :Apache4d_34 :Apache4d_33)
DataPropertyAssertion(:hasID :Apache4d_34 "Apache4d_34"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_34 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)
Declaration(NamedIndividual(:Apache4d_35))
# Individual: :Apache4d_35 (:Apache4d_35)
ClassAssertion(:AtomicSituation :Apache4d_35)
ObjectPropertyAssertion(:and_ :Apache4d_35 :Apache4d_33)
DataPropertyAssertion(:hasID :Apache4d_35 "Apache4d_35"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4d_35 "the Work includes a 'NOTICE' text file as part of its distribution"^^xsd:string)


Declaration(NamedIndividual(:Apache4dAddAttrib))
# Individual: :Apache4dAddAttrib (:Apache4dAddAttrib)
ClassAssertion(:Right :Apache4dAddAttrib)
DataPropertyAssertion(:hasID :Apache4dAddAttrib "Apache4dAddAttrib"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddAttrib "You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License."^^xsd:string)
Declaration(NamedIndividual(:Apache4dAddAttrib_36))
# Individual: :Apache4dAddAttrib_36 (:Apache4dAddAttrib_36)
ClassAssertion(:AtomicSituation :Apache4dAddAttrib_36)
ObjectPropertyAssertion(:satisfy :Apache4dAddAttrib_36 :Apache4dAddAttrib)
DataPropertyAssertion(:hasID :Apache4dAddAttrib_36 "Apache4dAddAttrib_36"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddAttrib_36 "[You added] Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work"^^xsd:string)
Declaration(NamedIndividual(:Apache4dAddAttrib_37))
# Individual: :Apache4dAddAttrib_37 (:Apache4dAddAttrib_37)
ClassAssertion(:AND :Apache4dAddAttrib_37)
ObjectPropertyAssertion(:activate :Apache4dAddAttrib_37 :Apache4dAddAttrib)
DataPropertyAssertion(:hasID :Apache4dAddAttrib_37 "Apache4dAddAttrib_37"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddAttrib_37 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :Apache4dAddAttrib_38 :Apache4d)
Declaration(NamedIndividual(:Apache4dAddAttrib_38))
# Individual: :Apache4dAddAttrib_38 (:Apache4dAddAttrib_38)
ClassAssertion(:SuperSituation :Apache4dAddAttrib_38)
ObjectPropertyAssertion(:and_ :Apache4dAddAttrib_38 :Apache4dAddAttrib_37)
DataPropertyAssertion(:hasID :Apache4dAddAttrib_38 "Apache4dAddAttrib_38"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddAttrib_38 "SS_Apache4d"^^xsd:string)
Declaration(NamedIndividual(:Apache4dAddAttrib_39))
# Individual: :Apache4dAddAttrib_39 (:Apache4dAddAttrib_39)
ClassAssertion(:AtomicSituation :Apache4dAddAttrib_39)
ObjectPropertyAssertion(:and_ :Apache4dAddAttrib_39 :Apache4dAddAttrib_37)
DataPropertyAssertion(:hasID :Apache4dAddAttrib_39 "Apache4dAddAttrib_39"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddAttrib_39 "[Your own] additional attribution notices cannot be construed as modifying the License"^^xsd:string)


Declaration(NamedIndividual(:Apache4dAddCopyright))
# Individual: :Apache4dAddCopyright (:Apache4dAddCopyright)
ClassAssertion(:Right :Apache4dAddCopyright)
DataPropertyAssertion(:hasID :Apache4dAddCopyright "Apache4dAddCopyright"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddCopyright "You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License."^^xsd:string)
Declaration(NamedIndividual(:Apache4dAddCopyright_40))
# Individual: :Apache4dAddCopyright_40 (:Apache4dAddCopyright_40)
ClassAssertion(:OR :Apache4dAddCopyright_40)
ObjectPropertyAssertion(:satisfy :Apache4dAddCopyright_40 :Apache4dAddCopyright)
DataPropertyAssertion(:hasID :Apache4dAddCopyright_40 "Apache4dAddCopyright_40"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddCopyright_40 "or"^^xsd:string)
Declaration(NamedIndividual(:Apache4dAddCopyright_41))
# Individual: :Apache4dAddCopyright_41 (:Apache4dAddCopyright_41)
ClassAssertion(:AtomicSituation :Apache4dAddCopyright_41)
ObjectPropertyAssertion(:or_ :Apache4dAddCopyright_41 :Apache4dAddCopyright_40)
DataPropertyAssertion(:hasID :Apache4dAddCopyright_41 "Apache4dAddCopyright_41"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddCopyright_41 "[You added] Your own copyright statement to Your modifications"^^xsd:string)
Declaration(NamedIndividual(:Apache4dAddCopyright_42))
# Individual: :Apache4dAddCopyright_42 (:Apache4dAddCopyright_42)
ClassAssertion(:AtomicSituation :Apache4dAddCopyright_42)
ObjectPropertyAssertion(:or_ :Apache4dAddCopyright_42 :Apache4dAddCopyright_40)
DataPropertyAssertion(:hasID :Apache4dAddCopyright_42 "Apache4dAddCopyright_42"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddCopyright_42 "[You provided] additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole"^^xsd:string)
ObjectPropertyAssertion(:_contains :Apache4dAddCopyright_43 :Apache4)
Declaration(NamedIndividual(:Apache4dAddCopyright_43))
# Individual: :Apache4dAddCopyright_43 (:Apache4dAddCopyright_43)
ClassAssertion(:SuperSituation :Apache4dAddCopyright_43)
ObjectPropertyAssertion(:activate :Apache4dAddCopyright_43 :Apache4dAddCopyright)
DataPropertyAssertion(:hasID :Apache4dAddCopyright_43 "Apache4dAddCopyright_43"^^xsd:string)
DataPropertyAssertion(:hasDesc :Apache4dAddCopyright_43 "SS_Apache4"^^xsd:string)

DifferentIndividuals( :Apache4 :Apache4_1 :Apache4_2 :Apache4_3 :Apache4_4 :Apache4_5 :Apache4_6 :Apache4_7 :Apache4_8 :Apache4a :Apache4a_9 :Apache4a_10 :Apache4b :Apache4b_11 :Apache4b_12 :Apache4c :Apache4c_13 :Apache4c_14 :Apache4c_15 :Apache4c_16 :Apache4c_17 :Apache4d :Apache4d_18 :Apache4d_19 :Apache4d_20 :Apache4d_21 :Apache4d_22 :Apache4d_23 :Apache4d_24 :Apache4d_25 :Apache4d_26 :Apache4d_27 :Apache4d_28 :Apache4d_29 :Apache4d_30 :Apache4d_31 :Apache4d_32 :Apache4d_33 :Apache4d_34 :Apache4d_35 :Apache4dAddAttrib :Apache4dAddAttrib_36 :Apache4dAddAttrib_37 :Apache4dAddAttrib_38 :Apache4dAddAttrib_39 :Apache4dAddCopyright :Apache4dAddCopyright_40 :Apache4dAddCopyright_41 :Apache4dAddCopyright_42 :Apache4dAddCopyright_43)


DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
) 
