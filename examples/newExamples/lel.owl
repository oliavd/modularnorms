Prefix(:=<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos>

Declaration(Class(:AND))
Declaration(Class(:AtomicSituation))
Declaration(Class(:Duty))
Declaration(Class(:LNOT))
Declaration(Class(:LogicalSituation))
Declaration(Class(:Norm))
Declaration(Class(:OR))
Declaration(Class(:Right))
Declaration(Class(:Situation))
Declaration(Class(:SuperSituation))
Declaration(ObjectProperty(:_contains))
Declaration(ObjectProperty(:activate))
Declaration(ObjectProperty(:and_))
Declaration(ObjectProperty(:not_))
Declaration(ObjectProperty(:or_))
Declaration(ObjectProperty(:satisfy))
Declaration(DataProperty(:Com))
Declaration(DataProperty(:Exr))
Declaration(DataProperty(:Inc))
Declaration(DataProperty(:Nex))
Declaration(DataProperty(:Tol))
Declaration(DataProperty(:Vio))
Declaration(DataProperty(:applicable))
Declaration(DataProperty(:hasAF))
Declaration(DataProperty(:hasAT))
Declaration(DataProperty(:hasAU))
Declaration(DataProperty(:hasDesc))
Declaration(DataProperty(:hasID))
Declaration(DataProperty(:hasSF))
Declaration(DataProperty(:hasST))
Declaration(DataProperty(:hasSU))
Declaration(DataProperty(:hohfeldType))
Declaration(DataProperty(:satisfied))




############################
#   Classes
############################

# Class: :AND (:AND)

SubClassOf(:AND :LogicalSituation)

# Class: :AtomicSituation (:AtomicSituation)

SubClassOf(:AtomicSituation :Situation)

# Class: :Duty (:Duty)

SubClassOf(:Duty :Norm)

# Class: :LNOT (:LNOT)

SubClassOf(:LNOT :LogicalSituation)

# Class: :LogicalSituation (:LogicalSituation)

SubClassOf(:LogicalSituation :Situation)

# Class: :OR (:OR)

SubClassOf(:OR :LogicalSituation)

# Class: :Right (:Right)

SubClassOf(:Right :Norm)

# Class: :SuperSituation (:SuperSituation)

SubClassOf(:SuperSituation :Situation)


############################
#   Named Individuals
############################




Declaration(NamedIndividual(:LEL4))
# Individual: :LEL4 (:LEL4)
ClassAssertion(:Right :LEL4)
DataPropertyAssertion(:hasID :LEL4 "LEL4"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4 "4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:"^^xsd:string)
Declaration(NamedIndividual(:LEL4_1))
# Individual: :LEL4_1 (:LEL4_1)
ClassAssertion(:AtomicSituation :LEL4_1)
ObjectPropertyAssertion(:satisfy :LEL4_1 :LEL4)
DataPropertyAssertion(:hasID :LEL4_1 "LEL4_1"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_1 "[You reproduced and distributed] copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL4_2))
# Individual: :LEL4_2 (:LEL4_2)
ClassAssertion(:AND :LEL4_2)
ObjectPropertyAssertion(:activate :LEL4_2 :LEL4)
DataPropertyAssertion(:hasID :LEL4_2 "LEL4_2"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_2 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL4_3 :LEL4a)
Declaration(NamedIndividual(:LEL4_3))
# Individual: :LEL4_3 (:LEL4_3)
ClassAssertion(:SuperSituation :LEL4_3)
ObjectPropertyAssertion(:and_ :LEL4_3 :LEL4_2)
DataPropertyAssertion(:hasID :LEL4_3 "LEL4_3"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_3 "SS_LEL4a"^^xsd:string)
Declaration(NamedIndividual(:LEL4_4))
# Individual: :LEL4_4 (:LEL4_4)
ClassAssertion(:AND :LEL4_4)
ObjectPropertyAssertion(:and_ :LEL4_4 :LEL4_2)
DataPropertyAssertion(:hasID :LEL4_4 "LEL4_4"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_4 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL4_5 :LEL4b)
Declaration(NamedIndividual(:LEL4_5))
# Individual: :LEL4_5 (:LEL4_5)
ClassAssertion(:SuperSituation :LEL4_5)
ObjectPropertyAssertion(:and_ :LEL4_5 :LEL4_4)
DataPropertyAssertion(:hasID :LEL4_5 "LEL4_5"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_5 "SS_LEL4b"^^xsd:string)
Declaration(NamedIndividual(:LEL4_6))
# Individual: :LEL4_6 (:LEL4_6)
ClassAssertion(:AND :LEL4_6)
ObjectPropertyAssertion(:and_ :LEL4_6 :LEL4_4)
DataPropertyAssertion(:hasID :LEL4_6 "LEL4_6"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_6 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL4_7 :LEL4c)
Declaration(NamedIndividual(:LEL4_7))
# Individual: :LEL4_7 (:LEL4_7)
ClassAssertion(:SuperSituation :LEL4_7)
ObjectPropertyAssertion(:and_ :LEL4_7 :LEL4_6)
DataPropertyAssertion(:hasID :LEL4_7 "LEL4_7"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_7 "SS_LEL4c"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL4_8 :LEL4d)
Declaration(NamedIndividual(:LEL4_8))
# Individual: :LEL4_8 (:LEL4_8)
ClassAssertion(:SuperSituation :LEL4_8)
ObjectPropertyAssertion(:and_ :LEL4_8 :LEL4_6)
DataPropertyAssertion(:hasID :LEL4_8 "LEL4_8"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4_8 "SS_LEL4d"^^xsd:string)


Declaration(NamedIndividual(:LEL4a))
# Individual: :LEL4a (:LEL4a)
ClassAssertion(:Duty :LEL4a)
DataPropertyAssertion(:hasID :LEL4a "LEL4a"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4a "4(a) You must give any other recipients of the Work or Derivative Works a copy of this License;"^^xsd:string)
Declaration(NamedIndividual(:LEL4a_9))
# Individual: :LEL4a_9 (:LEL4a_9)
ClassAssertion(:AtomicSituation :LEL4a_9)
ObjectPropertyAssertion(:satisfy :LEL4a_9 :LEL4a)
DataPropertyAssertion(:hasID :LEL4a_9 "LEL4a_9"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4a_9 "[You gave] other recipients of the Work or Derivative Works a copy of this License"^^xsd:string)
Declaration(NamedIndividual(:LEL4a_10))
# Individual: :LEL4a_10 (:LEL4a_10)
ClassAssertion(:AtomicSituation :LEL4a_10)
ObjectPropertyAssertion(:activate :LEL4a_10 :LEL4a)
DataPropertyAssertion(:hasID :LEL4a_10 "LEL4a_10"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4a_10 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)


Declaration(NamedIndividual(:LEL4b))
# Individual: :LEL4b (:LEL4b)
ClassAssertion(:Duty :LEL4b)
DataPropertyAssertion(:hasID :LEL4b "LEL4b"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4b "4(b) You must cause any modified files to carry prominent notices stating that You changed the files;"^^xsd:string)
Declaration(NamedIndividual(:LEL4b_11))
# Individual: :LEL4b_11 (:LEL4b_11)
ClassAssertion(:AtomicSituation :LEL4b_11)
ObjectPropertyAssertion(:satisfy :LEL4b_11 :LEL4b)
DataPropertyAssertion(:hasID :LEL4b_11 "LEL4b_11"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4b_11 "[You caused] any modified files to carry prominent notices stating that You changed the files"^^xsd:string)
Declaration(NamedIndividual(:LEL4b_12))
# Individual: :LEL4b_12 (:LEL4b_12)
ClassAssertion(:AtomicSituation :LEL4b_12)
ObjectPropertyAssertion(:activate :LEL4b_12 :LEL4b)
DataPropertyAssertion(:hasID :LEL4b_12 "LEL4b_12"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4b_12 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)


Declaration(NamedIndividual(:LEL4c))
# Individual: :LEL4c (:LEL4c)
ClassAssertion(:Duty :LEL4c)
DataPropertyAssertion(:hasID :LEL4c "LEL4c"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4c "4(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works;"^^xsd:string)
Declaration(NamedIndividual(:LEL4c_13))
# Individual: :LEL4c_13 (:LEL4c_13)
ClassAssertion(:AND :LEL4c_13)
ObjectPropertyAssertion(:satisfy :LEL4c_13 :LEL4c)
DataPropertyAssertion(:hasID :LEL4c_13 "LEL4c_13"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4c_13 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL4c_14))
# Individual: :LEL4c_14 (:LEL4c_14)
ClassAssertion(:AtomicSituation :LEL4c_14)
ObjectPropertyAssertion(:and_ :LEL4c_14 :LEL4c_13)
DataPropertyAssertion(:hasID :LEL4c_14 "LEL4c_14"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4c_14 "[You retained], in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work"^^xsd:string)
Declaration(NamedIndividual(:LEL4c_15))
# Individual: :LEL4c_15 (:LEL4c_15)
ClassAssertion(:LNOT :LEL4c_15)
ObjectPropertyAssertion(:and_ :LEL4c_15 :LEL4c_13)
DataPropertyAssertion(:hasID :LEL4c_15 "LEL4c_15"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4c_15 "not"^^xsd:string)
Declaration(NamedIndividual(:LEL4c_16))
# Individual: :LEL4c_16 (:LEL4c_16)
ClassAssertion(:AtomicSituation :LEL4c_16)
ObjectPropertyAssertion(:not_ :LEL4c_16 :LEL4c_15)
DataPropertyAssertion(:hasID :LEL4c_16 "LEL4c_16"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4c_16 "[You retained] those notices that do not pertain to any part of the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:LEL4c_17))
# Individual: :LEL4c_17 (:LEL4c_17)
ClassAssertion(:AtomicSituation :LEL4c_17)
ObjectPropertyAssertion(:activate :LEL4c_17 :LEL4c)
DataPropertyAssertion(:hasID :LEL4c_17 "LEL4c_17"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4c_17 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)


Declaration(NamedIndividual(:LEL4d))
# Individual: :LEL4d (:LEL4d)
ClassAssertion(:Duty :LEL4d)
DataPropertyAssertion(:hasID :LEL4d "LEL4d"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d "4(d) If the Work includes a 'NOTICE' text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License."^^xsd:string)
Declaration(NamedIndividual(:LEL4d_18))
# Individual: :LEL4d_18 (:LEL4d_18)
ClassAssertion(:AND :LEL4d_18)
ObjectPropertyAssertion(:satisfy :LEL4d_18 :LEL4d)
DataPropertyAssertion(:hasID :LEL4d_18 "LEL4d_18"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_18 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_19))
# Individual: :LEL4d_19 (:LEL4d_19)
ClassAssertion(:AND :LEL4d_19)
ObjectPropertyAssertion(:and_ :LEL4d_19 :LEL4d_18)
DataPropertyAssertion(:hasID :LEL4d_19 "LEL4d_19"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_19 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_20))
# Individual: :LEL4d_20 (:LEL4d_20)
ClassAssertion(:AtomicSituation :LEL4d_20)
ObjectPropertyAssertion(:and_ :LEL4d_20 :LEL4d_19)
DataPropertyAssertion(:hasID :LEL4d_20 "LEL4d_20"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_20 "[You included] a readable copy of the attribution notices contained within such NOTICE file"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_21))
# Individual: :LEL4d_21 (:LEL4d_21)
ClassAssertion(:OR :LEL4d_21)
ObjectPropertyAssertion(:and_ :LEL4d_21 :LEL4d_19)
DataPropertyAssertion(:hasID :LEL4d_21 "LEL4d_21"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_21 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_22))
# Individual: :LEL4d_22 (:LEL4d_22)
ClassAssertion(:AtomicSituation :LEL4d_22)
ObjectPropertyAssertion(:or_ :LEL4d_22 :LEL4d_21)
DataPropertyAssertion(:hasID :LEL4d_22 "LEL4d_22"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_22 "[(in notice file) You included the attribution notices] within a NOTICE text file distributed as part of the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_23))
# Individual: :LEL4d_23 (:LEL4d_23)
ClassAssertion(:OR :LEL4d_23)
ObjectPropertyAssertion(:or_ :LEL4d_23 :LEL4d_21)
DataPropertyAssertion(:hasID :LEL4d_23 "LEL4d_23"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_23 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_24))
# Individual: :LEL4d_24 (:LEL4d_24)
ClassAssertion(:AND :LEL4d_24)
ObjectPropertyAssertion(:or_ :LEL4d_24 :LEL4d_23)
DataPropertyAssertion(:hasID :LEL4d_24 "LEL4d_24"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_24 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_25))
# Individual: :LEL4d_25 (:LEL4d_25)
ClassAssertion(:AtomicSituation :LEL4d_25)
ObjectPropertyAssertion(:and_ :LEL4d_25 :LEL4d_24)
DataPropertyAssertion(:hasID :LEL4d_25 "LEL4d_25"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_25 "[(in source) in You included the attribution notices] within the Source form or documentation"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_26))
# Individual: :LEL4d_26 (:LEL4d_26)
ClassAssertion(:AtomicSituation :LEL4d_26)
ObjectPropertyAssertion(:and_ :LEL4d_26 :LEL4d_24)
DataPropertyAssertion(:hasID :LEL4d_26 "LEL4d_26"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_26 "source [is] provided along with the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_27))
# Individual: :LEL4d_27 (:LEL4d_27)
ClassAssertion(:AND :LEL4d_27)
ObjectPropertyAssertion(:or_ :LEL4d_27 :LEL4d_23)
DataPropertyAssertion(:hasID :LEL4d_27 "LEL4d_27"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_27 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_28))
# Individual: :LEL4d_28 (:LEL4d_28)
ClassAssertion(:AtomicSituation :LEL4d_28)
ObjectPropertyAssertion(:and_ :LEL4d_28 :LEL4d_27)
DataPropertyAssertion(:hasID :LEL4d_28 "LEL4d_28"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_28 "[(in display) You included the attribution notices] within a display generated by the Derivative Works ... wherever such third-party notices normally appear"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_29))
# Individual: :LEL4d_29 (:LEL4d_29)
ClassAssertion(:AtomicSituation :LEL4d_29)
ObjectPropertyAssertion(:and_ :LEL4d_29 :LEL4d_27)
DataPropertyAssertion(:hasID :LEL4d_29 "LEL4d_29"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_29 "third-party [attribution] notices normally appear [in display]"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_30))
# Individual: :LEL4d_30 (:LEL4d_30)
ClassAssertion(:AtomicSituation :LEL4d_30)
ObjectPropertyAssertion(:and_ :LEL4d_30 :LEL4d_18)
DataPropertyAssertion(:hasID :LEL4d_30 "LEL4d_30"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_30 "[You excluded] those notices that do not pertain to any part of the Derivative Works"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_31))
# Individual: :LEL4d_31 (:LEL4d_31)
ClassAssertion(:AND :LEL4d_31)
ObjectPropertyAssertion(:activate :LEL4d_31 :LEL4d)
DataPropertyAssertion(:hasID :LEL4d_31 "LEL4d_31"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_31 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_32))
# Individual: :LEL4d_32 (:LEL4d_32)
ClassAssertion(:AtomicSituation :LEL4d_32)
ObjectPropertyAssertion(:and_ :LEL4d_32 :LEL4d_31)
DataPropertyAssertion(:hasID :LEL4d_32 "LEL4d_32"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_32 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)
Declaration(NamedIndividual(:LEL4d_33))
# Individual: :LEL4d_33 (:LEL4d_33)
ClassAssertion(:AtomicSituation :LEL4d_33)
ObjectPropertyAssertion(:and_ :LEL4d_33 :LEL4d_31)
DataPropertyAssertion(:hasID :LEL4d_33 "LEL4d_33"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4d_33 "the Work includes a 'NOTICE' text file as part of its distribution"^^xsd:string)


Declaration(NamedIndividual(:LEL4dAddAttrib))
# Individual: :LEL4dAddAttrib (:LEL4dAddAttrib)
ClassAssertion(:Right :LEL4dAddAttrib)
DataPropertyAssertion(:hasID :LEL4dAddAttrib "LEL4dAddAttrib"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddAttrib "You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License."^^xsd:string)
Declaration(NamedIndividual(:LEL4dAddAttrib_34))
# Individual: :LEL4dAddAttrib_34 (:LEL4dAddAttrib_34)
ClassAssertion(:AtomicSituation :LEL4dAddAttrib_34)
ObjectPropertyAssertion(:satisfy :LEL4dAddAttrib_34 :LEL4dAddAttrib)
DataPropertyAssertion(:hasID :LEL4dAddAttrib_34 "LEL4dAddAttrib_34"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddAttrib_34 "[You added] Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work"^^xsd:string)
Declaration(NamedIndividual(:LEL4dAddAttrib_35))
# Individual: :LEL4dAddAttrib_35 (:LEL4dAddAttrib_35)
ClassAssertion(:AND :LEL4dAddAttrib_35)
ObjectPropertyAssertion(:activate :LEL4dAddAttrib_35 :LEL4dAddAttrib)
DataPropertyAssertion(:hasID :LEL4dAddAttrib_35 "LEL4dAddAttrib_35"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddAttrib_35 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL4dAddAttrib_36 :LEL4d)
Declaration(NamedIndividual(:LEL4dAddAttrib_36))
# Individual: :LEL4dAddAttrib_36 (:LEL4dAddAttrib_36)
ClassAssertion(:SuperSituation :LEL4dAddAttrib_36)
ObjectPropertyAssertion(:and_ :LEL4dAddAttrib_36 :LEL4dAddAttrib_35)
DataPropertyAssertion(:hasID :LEL4dAddAttrib_36 "LEL4dAddAttrib_36"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddAttrib_36 "SS_LEL4d"^^xsd:string)
Declaration(NamedIndividual(:LEL4dAddAttrib_37))
# Individual: :LEL4dAddAttrib_37 (:LEL4dAddAttrib_37)
ClassAssertion(:AtomicSituation :LEL4dAddAttrib_37)
ObjectPropertyAssertion(:and_ :LEL4dAddAttrib_37 :LEL4dAddAttrib_35)
DataPropertyAssertion(:hasID :LEL4dAddAttrib_37 "LEL4dAddAttrib_37"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddAttrib_37 "[Your own] additional attribution notices cannot be construed as modifying the License"^^xsd:string)


Declaration(NamedIndividual(:LEL4dAddCopyright))
# Individual: :LEL4dAddCopyright (:LEL4dAddCopyright)
ClassAssertion(:Right :LEL4dAddCopyright)
DataPropertyAssertion(:hasID :LEL4dAddCopyright "LEL4dAddCopyright"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddCopyright "You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License."^^xsd:string)
Declaration(NamedIndividual(:LEL4dAddCopyright_38))
# Individual: :LEL4dAddCopyright_38 (:LEL4dAddCopyright_38)
ClassAssertion(:OR :LEL4dAddCopyright_38)
ObjectPropertyAssertion(:satisfy :LEL4dAddCopyright_38 :LEL4dAddCopyright)
DataPropertyAssertion(:hasID :LEL4dAddCopyright_38 "LEL4dAddCopyright_38"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddCopyright_38 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL4dAddCopyright_39))
# Individual: :LEL4dAddCopyright_39 (:LEL4dAddCopyright_39)
ClassAssertion(:AtomicSituation :LEL4dAddCopyright_39)
ObjectPropertyAssertion(:or_ :LEL4dAddCopyright_39 :LEL4dAddCopyright_38)
DataPropertyAssertion(:hasID :LEL4dAddCopyright_39 "LEL4dAddCopyright_39"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddCopyright_39 "[You added] Your own copyright statement to Your modifications"^^xsd:string)
Declaration(NamedIndividual(:LEL4dAddCopyright_40))
# Individual: :LEL4dAddCopyright_40 (:LEL4dAddCopyright_40)
ClassAssertion(:AtomicSituation :LEL4dAddCopyright_40)
ObjectPropertyAssertion(:or_ :LEL4dAddCopyright_40 :LEL4dAddCopyright_38)
DataPropertyAssertion(:hasID :LEL4dAddCopyright_40 "LEL4dAddCopyright_40"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddCopyright_40 "[You provided] additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL4dAddCopyright_41 :LEL4)
Declaration(NamedIndividual(:LEL4dAddCopyright_41))
# Individual: :LEL4dAddCopyright_41 (:LEL4dAddCopyright_41)
ClassAssertion(:SuperSituation :LEL4dAddCopyright_41)
ObjectPropertyAssertion(:activate :LEL4dAddCopyright_41 :LEL4dAddCopyright)
DataPropertyAssertion(:hasID :LEL4dAddCopyright_41 "LEL4dAddCopyright_41"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL4dAddCopyright_41 "SS_LEL4"^^xsd:string)


Declaration(NamedIndividual(:LEL2))
# Individual: :LEL2 (:LEL2)
ClassAssertion(:Right :LEL2)
DataPropertyAssertion(:hasID :LEL2 "LEL2"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2 "Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form."^^xsd:string)
Declaration(NamedIndividual(:LEL2_42))
# Individual: :LEL2_42 (:LEL2_42)
ClassAssertion(:OR :LEL2_42)
ObjectPropertyAssertion(:satisfy :LEL2_42 :LEL2)
DataPropertyAssertion(:hasID :LEL2_42 "LEL2_42"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_42 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL2_43))
# Individual: :LEL2_43 (:LEL2_43)
ClassAssertion(:OR :LEL2_43)
ObjectPropertyAssertion(:or_ :LEL2_43 :LEL2_42)
DataPropertyAssertion(:hasID :LEL2_43 "LEL2_43"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_43 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL2_44))
# Individual: :LEL2_44 (:LEL2_44)
ClassAssertion(:OR :LEL2_44)
ObjectPropertyAssertion(:or_ :LEL2_44 :LEL2_43)
DataPropertyAssertion(:hasID :LEL2_44 "LEL2_44"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_44 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL2_45))
# Individual: :LEL2_45 (:LEL2_45)
ClassAssertion(:OR :LEL2_45)
ObjectPropertyAssertion(:or_ :LEL2_45 :LEL2_44)
DataPropertyAssertion(:hasID :LEL2_45 "LEL2_45"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_45 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL2_46))
# Individual: :LEL2_46 (:LEL2_46)
ClassAssertion(:OR :LEL2_46)
ObjectPropertyAssertion(:or_ :LEL2_46 :LEL2_45)
DataPropertyAssertion(:hasID :LEL2_46 "LEL2_46"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_46 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL2_47))
# Individual: :LEL2_47 (:LEL2_47)
ClassAssertion(:AtomicSituation :LEL2_47)
ObjectPropertyAssertion(:or_ :LEL2_47 :LEL2_46)
DataPropertyAssertion(:hasID :LEL2_47 "LEL2_47"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_47 "[You reproduced] the Work and such Derivative Works in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL2_48))
# Individual: :LEL2_48 (:LEL2_48)
ClassAssertion(:AtomicSituation :LEL2_48)
ObjectPropertyAssertion(:or_ :LEL2_48 :LEL2_46)
DataPropertyAssertion(:hasID :LEL2_48 "LEL2_48"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_48 "[You prepared Derivative Works of] the Work and such Derivative Works in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL2_49))
# Individual: :LEL2_49 (:LEL2_49)
ClassAssertion(:AtomicSituation :LEL2_49)
ObjectPropertyAssertion(:or_ :LEL2_49 :LEL2_45)
DataPropertyAssertion(:hasID :LEL2_49 "LEL2_49"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_49 "[You publicly displayed] the Work and such Derivative Works in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL2_50))
# Individual: :LEL2_50 (:LEL2_50)
ClassAssertion(:AtomicSituation :LEL2_50)
ObjectPropertyAssertion(:or_ :LEL2_50 :LEL2_44)
DataPropertyAssertion(:hasID :LEL2_50 "LEL2_50"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_50 "[You publicly performed] the Work and such Derivative Works in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL2_51))
# Individual: :LEL2_51 (:LEL2_51)
ClassAssertion(:AtomicSituation :LEL2_51)
ObjectPropertyAssertion(:or_ :LEL2_51 :LEL2_43)
DataPropertyAssertion(:hasID :LEL2_51 "LEL2_51"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_51 "[You sublicenced] the Work and such Derivative Works in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL2_52))
# Individual: :LEL2_52 (:LEL2_52)
ClassAssertion(:AtomicSituation :LEL2_52)
ObjectPropertyAssertion(:or_ :LEL2_52 :LEL2_42)
DataPropertyAssertion(:hasID :LEL2_52 "LEL2_52"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_52 "[You distributed] the Work and such Derivative Works in Source or Object form"^^xsd:string)
Declaration(NamedIndividual(:LEL2_53))
# Individual: :LEL2_53 (:LEL2_53)
ClassAssertion(:AND :LEL2_53)
ObjectPropertyAssertion(:activate :LEL2_53 :LEL2)
DataPropertyAssertion(:hasID :LEL2_53 "LEL2_53"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_53 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL2_54 :LEL4)
Declaration(NamedIndividual(:LEL2_54))
# Individual: :LEL2_54 (:LEL2_54)
ClassAssertion(:SuperSituation :LEL2_54)
ObjectPropertyAssertion(:and_ :LEL2_54 :LEL2_53)
DataPropertyAssertion(:hasID :LEL2_54 "LEL2_54"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_54 "SS_LEL4"^^xsd:string)
Declaration(NamedIndividual(:LEL2_55))
# Individual: :LEL2_55 (:LEL2_55)
ClassAssertion(:AND :LEL2_55)
ObjectPropertyAssertion(:and_ :LEL2_55 :LEL2_53)
DataPropertyAssertion(:hasID :LEL2_55 "LEL2_55"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_55 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL2_56))
# Individual: :LEL2_56 (:LEL2_56)
ClassAssertion(:AND :LEL2_56)
ObjectPropertyAssertion(:and_ :LEL2_56 :LEL2_55)
DataPropertyAssertion(:hasID :LEL2_56 "LEL2_56"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_56 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL2_57))
# Individual: :LEL2_57 (:LEL2_57)
ClassAssertion(:AND :LEL2_57)
ObjectPropertyAssertion(:and_ :LEL2_57 :LEL2_56)
DataPropertyAssertion(:hasID :LEL2_57 "LEL2_57"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_57 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL2_58 :LEL5)
Declaration(NamedIndividual(:LEL2_58))
# Individual: :LEL2_58 (:LEL2_58)
ClassAssertion(:SuperSituation :LEL2_58)
ObjectPropertyAssertion(:and_ :LEL2_58 :LEL2_57)
DataPropertyAssertion(:hasID :LEL2_58 "LEL2_58"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_58 "SS_LEL5"^^xsd:string)
Declaration(NamedIndividual(:LEL2_59))
# Individual: :LEL2_59 (:LEL2_59)
ClassAssertion(:AND :LEL2_59)
ObjectPropertyAssertion(:and_ :LEL2_59 :LEL2_57)
DataPropertyAssertion(:hasID :LEL2_59 "LEL2_59"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_59 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL2_60 :LEL6)
Declaration(NamedIndividual(:LEL2_60))
# Individual: :LEL2_60 (:LEL2_60)
ClassAssertion(:SuperSituation :LEL2_60)
ObjectPropertyAssertion(:and_ :LEL2_60 :LEL2_59)
DataPropertyAssertion(:hasID :LEL2_60 "LEL2_60"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_60 "SS_LEL6"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL2_61 :LEL7)
Declaration(NamedIndividual(:LEL2_61))
# Individual: :LEL2_61 (:LEL2_61)
ClassAssertion(:SuperSituation :LEL2_61)
ObjectPropertyAssertion(:and_ :LEL2_61 :LEL2_59)
DataPropertyAssertion(:hasID :LEL2_61 "LEL2_61"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_61 "SS_LEL7"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL2_62 :LEL8)
Declaration(NamedIndividual(:LEL2_62))
# Individual: :LEL2_62 (:LEL2_62)
ClassAssertion(:SuperSituation :LEL2_62)
ObjectPropertyAssertion(:and_ :LEL2_62 :LEL2_56)
DataPropertyAssertion(:hasID :LEL2_62 "LEL2_62"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_62 "SS_LEL8"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL2_63 :LEL9)
Declaration(NamedIndividual(:LEL2_63))
# Individual: :LEL2_63 (:LEL2_63)
ClassAssertion(:SuperSituation :LEL2_63)
ObjectPropertyAssertion(:and_ :LEL2_63 :LEL2_55)
DataPropertyAssertion(:hasID :LEL2_63 "LEL2_63"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL2_63 "SS_LEL9"^^xsd:string)


Declaration(NamedIndividual(:LEL3))
# Individual: :LEL3 (:LEL3)
ClassAssertion(:Right :LEL3)
DataPropertyAssertion(:hasID :LEL3 "LEL3"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3 "Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted.If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed."^^xsd:string)
Declaration(NamedIndividual(:LEL3_64))
# Individual: :LEL3_64 (:LEL3_64)
ClassAssertion(:AtomicSituation :LEL3_64)
ObjectPropertyAssertion(:satisfy :LEL3_64 :LEL3)
DataPropertyAssertion(:hasID :LEL3_64 "LEL3_64"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_64 "[You made, have made, used, offered to sell, sold, imported and otherwise transfered] the Work"^^xsd:string)
Declaration(NamedIndividual(:LEL3_65))
# Individual: :LEL3_65 (:LEL3_65)
ClassAssertion(:AND :LEL3_65)
ObjectPropertyAssertion(:activate :LEL3_65 :LEL3)
DataPropertyAssertion(:hasID :LEL3_65 "LEL3_65"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_65 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL3_66 :LEL4)
Declaration(NamedIndividual(:LEL3_66))
# Individual: :LEL3_66 (:LEL3_66)
ClassAssertion(:SuperSituation :LEL3_66)
ObjectPropertyAssertion(:and_ :LEL3_66 :LEL3_65)
DataPropertyAssertion(:hasID :LEL3_66 "LEL3_66"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_66 "SS_LEL4"^^xsd:string)
Declaration(NamedIndividual(:LEL3_67))
# Individual: :LEL3_67 (:LEL3_67)
ClassAssertion(:AND :LEL3_67)
ObjectPropertyAssertion(:and_ :LEL3_67 :LEL3_65)
DataPropertyAssertion(:hasID :LEL3_67 "LEL3_67"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_67 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL3_68))
# Individual: :LEL3_68 (:LEL3_68)
ClassAssertion(:AND :LEL3_68)
ObjectPropertyAssertion(:and_ :LEL3_68 :LEL3_67)
DataPropertyAssertion(:hasID :LEL3_68 "LEL3_68"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_68 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL3_69))
# Individual: :LEL3_69 (:LEL3_69)
ClassAssertion(:AND :LEL3_69)
ObjectPropertyAssertion(:and_ :LEL3_69 :LEL3_68)
DataPropertyAssertion(:hasID :LEL3_69 "LEL3_69"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_69 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL3_70))
# Individual: :LEL3_70 (:LEL3_70)
ClassAssertion(:AND :LEL3_70)
ObjectPropertyAssertion(:and_ :LEL3_70 :LEL3_69)
DataPropertyAssertion(:hasID :LEL3_70 "LEL3_70"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_70 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL3_71 :LEL9)
Declaration(NamedIndividual(:LEL3_71))
# Individual: :LEL3_71 (:LEL3_71)
ClassAssertion(:SuperSituation :LEL3_71)
ObjectPropertyAssertion(:and_ :LEL3_71 :LEL3_70)
DataPropertyAssertion(:hasID :LEL3_71 "LEL3_71"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_71 "SS_LEL9"^^xsd:string)
Declaration(NamedIndividual(:LEL3_72))
# Individual: :LEL3_72 (:LEL3_72)
ClassAssertion(:AND :LEL3_72)
ObjectPropertyAssertion(:and_ :LEL3_72 :LEL3_70)
DataPropertyAssertion(:hasID :LEL3_72 "LEL3_72"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_72 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL3_73 :LEL6)
Declaration(NamedIndividual(:LEL3_73))
# Individual: :LEL3_73 (:LEL3_73)
ClassAssertion(:SuperSituation :LEL3_73)
ObjectPropertyAssertion(:and_ :LEL3_73 :LEL3_72)
DataPropertyAssertion(:hasID :LEL3_73 "LEL3_73"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_73 "SS_LEL6"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL3_74 :LEL7)
Declaration(NamedIndividual(:LEL3_74))
# Individual: :LEL3_74 (:LEL3_74)
ClassAssertion(:SuperSituation :LEL3_74)
ObjectPropertyAssertion(:and_ :LEL3_74 :LEL3_72)
DataPropertyAssertion(:hasID :LEL3_74 "LEL3_74"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_74 "SS_LEL7"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL3_75 :LEL8)
Declaration(NamedIndividual(:LEL3_75))
# Individual: :LEL3_75 (:LEL3_75)
ClassAssertion(:SuperSituation :LEL3_75)
ObjectPropertyAssertion(:and_ :LEL3_75 :LEL3_69)
DataPropertyAssertion(:hasID :LEL3_75 "LEL3_75"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_75 "SS_LEL8"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL3_76 :LEL5)
Declaration(NamedIndividual(:LEL3_76))
# Individual: :LEL3_76 (:LEL3_76)
ClassAssertion(:SuperSituation :LEL3_76)
ObjectPropertyAssertion(:and_ :LEL3_76 :LEL3_68)
DataPropertyAssertion(:hasID :LEL3_76 "LEL3_76"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_76 "SS_LEL5"^^xsd:string)
Declaration(NamedIndividual(:LEL3_77))
# Individual: :LEL3_77 (:LEL3_77)
ClassAssertion(:LNOT :LEL3_77)
ObjectPropertyAssertion(:and_ :LEL3_77 :LEL3_67)
DataPropertyAssertion(:hasID :LEL3_77 "LEL3_77"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_77 "not"^^xsd:string)
Declaration(NamedIndividual(:LEL3_78))
# Individual: :LEL3_78 (:LEL3_78)
ClassAssertion(:AtomicSituation :LEL3_78)
ObjectPropertyAssertion(:not_ :LEL3_78 :LEL3_77)
DataPropertyAssertion(:hasID :LEL3_78 "LEL3_78"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL3_78 "[You instituted] patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement"^^xsd:string)


Declaration(NamedIndividual(:LEL5))
# Individual: :LEL5 (:LEL5)
ClassAssertion(:Duty :LEL5)
DataPropertyAssertion(:hasID :LEL5 "LEL5"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5 "Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions."^^xsd:string)
Declaration(NamedIndividual(:LEL5_79))
# Individual: :LEL5_79 (:LEL5_79)
ClassAssertion(:AND :LEL5_79)
ObjectPropertyAssertion(:satisfy :LEL5_79 :LEL5)
DataPropertyAssertion(:hasID :LEL5_79 "LEL5_79"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5_79 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL5_80))
# Individual: :LEL5_80 (:LEL5_80)
ClassAssertion(:OR :LEL5_80)
ObjectPropertyAssertion(:and_ :LEL5_80 :LEL5_79)
DataPropertyAssertion(:hasID :LEL5_80 "LEL5_80"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5_80 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL5_81))
# Individual: :LEL5_81 (:LEL5_81)
ClassAssertion(:AtomicSituation :LEL5_81)
ObjectPropertyAssertion(:or_ :LEL5_81 :LEL5_80)
DataPropertyAssertion(:hasID :LEL5_81 "LEL5_81"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5_81 "[Any Contribution intentionally submitted for inclusion in the Work by You to the Licensor is] under the terms and conditions of this License, without any additional terms or conditions"^^xsd:string)
Declaration(NamedIndividual(:LEL5_82))
# Individual: :LEL5_82 (:LEL5_82)
ClassAssertion(:AtomicSituation :LEL5_82)
ObjectPropertyAssertion(:or_ :LEL5_82 :LEL5_80)
DataPropertyAssertion(:hasID :LEL5_82 "LEL5_82"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5_82 "[You explicitly stated] terms and conditions"^^xsd:string)
Declaration(NamedIndividual(:LEL5_83))
# Individual: :LEL5_83 (:LEL5_83)
ClassAssertion(:AtomicSituation :LEL5_83)
ObjectPropertyAssertion(:and_ :LEL5_83 :LEL5_79)
DataPropertyAssertion(:hasID :LEL5_83 "LEL5_83"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5_83 "[Nothing herein supersede ]or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions."^^xsd:string)
Declaration(NamedIndividual(:LEL5_84))
# Individual: :LEL5_84 (:LEL5_84)
ClassAssertion(:AtomicSituation :LEL5_84)
ObjectPropertyAssertion(:activate :LEL5_84 :LEL5)
DataPropertyAssertion(:hasID :LEL5_84 "LEL5_84"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL5_84 "[You submitted] a Work for Contribution"^^xsd:string)


Declaration(NamedIndividual(:LEL6))
# Individual: :LEL6 (:LEL6)
ClassAssertion(:Duty :LEL6)
DataPropertyAssertion(:hasID :LEL6 "LEL6"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL6 "Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file"^^xsd:string)
Declaration(NamedIndividual(:LEL6_85))
# Individual: :LEL6_85 (:LEL6_85)
ClassAssertion(:OR :LEL6_85)
ObjectPropertyAssertion(:satisfy :LEL6_85 :LEL6)
DataPropertyAssertion(:hasID :LEL6_85 "LEL6_85"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL6_85 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL6_86))
# Individual: :LEL6_86 (:LEL6_86)
ClassAssertion(:LNOT :LEL6_86)
ObjectPropertyAssertion(:or_ :LEL6_86 :LEL6_85)
DataPropertyAssertion(:hasID :LEL6_86 "LEL6_86"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL6_86 "not"^^xsd:string)
Declaration(NamedIndividual(:LEL6_87))
# Individual: :LEL6_87 (:LEL6_87)
ClassAssertion(:AtomicSituation :LEL6_87)
ObjectPropertyAssertion(:not_ :LEL6_87 :LEL6_86)
DataPropertyAssertion(:hasID :LEL6_87 "LEL6_87"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL6_87 "[You used trade names, trademarks, service marks, or product names of the Licensor]"^^xsd:string)
Declaration(NamedIndividual(:LEL6_88))
# Individual: :LEL6_88 (:LEL6_88)
ClassAssertion(:AtomicSituation :LEL6_88)
ObjectPropertyAssertion(:or_ :LEL6_88 :LEL6_85)
DataPropertyAssertion(:hasID :LEL6_88 "LEL6_88"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL6_88 "[As required ]for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file [You used] trade names, trademarks, service marks, or product names of the Licensor"^^xsd:string)
Declaration(NamedIndividual(:LEL6_89))
# Individual: :LEL6_89 (:LEL6_89)
ClassAssertion(:AtomicSituation :LEL6_89)
ObjectPropertyAssertion(:activate :LEL6_89 :LEL6)
DataPropertyAssertion(:hasID :LEL6_89 "LEL6_89"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL6_89 "[You exercice permission granted by this License ]"^^xsd:string)


Declaration(NamedIndividual(:LEL7))
# Individual: :LEL7 (:LEL7)
ClassAssertion(:Duty :LEL7)
DataPropertyAssertion(:hasID :LEL7 "LEL7"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7 "Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License."^^xsd:string)
Declaration(NamedIndividual(:LEL7_90))
# Individual: :LEL7_90 (:LEL7_90)
ClassAssertion(:OR :LEL7_90)
ObjectPropertyAssertion(:satisfy :LEL7_90 :LEL7)
DataPropertyAssertion(:hasID :LEL7_90 "LEL7_90"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7_90 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL7_91))
# Individual: :LEL7_91 (:LEL7_91)
ClassAssertion(:AtomicSituation :LEL7_91)
ObjectPropertyAssertion(:or_ :LEL7_91 :LEL7_90)
DataPropertyAssertion(:hasID :LEL7_91 "LEL7_91"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7_91 "[Required by applicable law or agreed to in writing], Licensor did not provides the Work (and each Contributor did not provide its Contributions) on an 'AS IS' basis, WITHOUTH WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE"^^xsd:string)
Declaration(NamedIndividual(:LEL7_92))
# Individual: :LEL7_92 (:LEL7_92)
ClassAssertion(:AND :LEL7_92)
ObjectPropertyAssertion(:or_ :LEL7_92 :LEL7_90)
DataPropertyAssertion(:hasID :LEL7_92 "LEL7_92"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7_92 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL7_93))
# Individual: :LEL7_93 (:LEL7_93)
ClassAssertion(:AtomicSituation :LEL7_93)
ObjectPropertyAssertion(:and_ :LEL7_93 :LEL7_92)
DataPropertyAssertion(:hasID :LEL7_93 "LEL7_93"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7_93 "[You determined appropriateness of using or redistributing the Work"^^xsd:string)
Declaration(NamedIndividual(:LEL7_94))
# Individual: :LEL7_94 (:LEL7_94)
ClassAssertion(:AtomicSituation :LEL7_94)
ObjectPropertyAssertion(:and_ :LEL7_94 :LEL7_92)
DataPropertyAssertion(:hasID :LEL7_94 "LEL7_94"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7_94 "[You assumed] any risks associated with Your exercice of permissions under this license"^^xsd:string)
Declaration(NamedIndividual(:LEL7_95))
# Individual: :LEL7_95 (:LEL7_95)
ClassAssertion(:AtomicSituation :LEL7_95)
ObjectPropertyAssertion(:activate :LEL7_95 :LEL7)
DataPropertyAssertion(:hasID :LEL7_95 "LEL7_95"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL7_95 "You exercice permission granted by this License"^^xsd:string)


Declaration(NamedIndividual(:LEL8))
# Individual: :LEL8 (:LEL8)
ClassAssertion(:Duty :LEL8)
DataPropertyAssertion(:hasID :LEL8 "LEL8"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL8 "Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages."^^xsd:string)
Declaration(NamedIndividual(:LEL8_96))
# Individual: :LEL8_96 (:LEL8_96)
ClassAssertion(:OR :LEL8_96)
ObjectPropertyAssertion(:satisfy :LEL8_96 :LEL8)
DataPropertyAssertion(:hasID :LEL8_96 "LEL8_96"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL8_96 "or"^^xsd:string)
Declaration(NamedIndividual(:LEL8_97))
# Individual: :LEL8_97 (:LEL8_97)
ClassAssertion(:AtomicSituation :LEL8_97)
ObjectPropertyAssertion(:or_ :LEL8_97 :LEL8_96)
DataPropertyAssertion(:hasID :LEL8_97 "LEL8_97"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL8_97 "[Required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, [You holded] Contributor liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses)]"^^xsd:string)
Declaration(NamedIndividual(:LEL8_98))
# Individual: :LEL8_98 (:LEL8_98)
ClassAssertion(:LNOT :LEL8_98)
ObjectPropertyAssertion(:or_ :LEL8_98 :LEL8_96)
DataPropertyAssertion(:hasID :LEL8_98 "LEL8_98"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL8_98 "not"^^xsd:string)
Declaration(NamedIndividual(:LEL8_99))
# Individual: :LEL8_99 (:LEL8_99)
ClassAssertion(:AtomicSituation :LEL8_99)
ObjectPropertyAssertion(:not_ :LEL8_99 :LEL8_98)
DataPropertyAssertion(:hasID :LEL8_99 "LEL8_99"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL8_99 "[You holded] Contributor liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses)"^^xsd:string)
Declaration(NamedIndividual(:LEL8_100))
# Individual: :LEL8_100 (:LEL8_100)
ClassAssertion(:AtomicSituation :LEL8_100)
ObjectPropertyAssertion(:activate :LEL8_100 :LEL8)
DataPropertyAssertion(:hasID :LEL8_100 "LEL8_100"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL8_100 "You exercice permissions granted by this License"^^xsd:string)


Declaration(NamedIndividual(:LEL9))
# Individual: :LEL9 (:LEL9)
ClassAssertion(:Right :LEL9)
DataPropertyAssertion(:hasID :LEL9 "LEL9"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9 "Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer,and charge a fee for, acceptance of support, warranty, indemnity,or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability."^^xsd:string)
Declaration(NamedIndividual(:LEL9_101))
# Individual: :LEL9_101 (:LEL9_101)
ClassAssertion(:AND :LEL9_101)
ObjectPropertyAssertion(:satisfy :LEL9_101 :LEL9)
DataPropertyAssertion(:hasID :LEL9_101 "LEL9_101"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9_101 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL9_102))
# Individual: :LEL9_102 (:LEL9_102)
ClassAssertion(:AND :LEL9_102)
ObjectPropertyAssertion(:and_ :LEL9_102 :LEL9_101)
DataPropertyAssertion(:hasID :LEL9_102 "LEL9_102"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9_102 "and"^^xsd:string)
Declaration(NamedIndividual(:LEL9_103))
# Individual: :LEL9_103 (:LEL9_103)
ClassAssertion(:AtomicSituation :LEL9_103)
ObjectPropertyAssertion(:and_ :LEL9_103 :LEL9_102)
DataPropertyAssertion(:hasID :LEL9_103 "LEL9_103"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9_103 "[You offered, and charge] a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License"^^xsd:string)
Declaration(NamedIndividual(:LEL9_104))
# Individual: :LEL9_104 (:LEL9_104)
ClassAssertion(:AtomicSituation :LEL9_104)
ObjectPropertyAssertion(:and_ :LEL9_104 :LEL9_102)
DataPropertyAssertion(:hasID :LEL9_104 "LEL9_104"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9_104 "[You acted] only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor"^^xsd:string)
Declaration(NamedIndividual(:LEL9_105))
# Individual: :LEL9_105 (:LEL9_105)
ClassAssertion(:AtomicSituation :LEL9_105)
ObjectPropertyAssertion(:and_ :LEL9_105 :LEL9_101)
DataPropertyAssertion(:hasID :LEL9_105 "LEL9_105"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9_105 "[You agreed] to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability"^^xsd:string)
ObjectPropertyAssertion(:_contains :LEL9_106 :LEL4)
Declaration(NamedIndividual(:LEL9_106))
# Individual: :LEL9_106 (:LEL9_106)
ClassAssertion(:SuperSituation :LEL9_106)
ObjectPropertyAssertion(:activate :LEL9_106 :LEL9)
DataPropertyAssertion(:hasID :LEL9_106 "LEL9_106"^^xsd:string)
DataPropertyAssertion(:hasDesc :LEL9_106 "SS_LEL4"^^xsd:string)

DifferentIndividuals( :LEL4 :LEL4_1 :LEL4_2 :LEL4_3 :LEL4_4 :LEL4_5 :LEL4_6 :LEL4_7 :LEL4_8 :LEL4a :LEL4a_9 :LEL4a_10 :LEL4b :LEL4b_11 :LEL4b_12 :LEL4c :LEL4c_13 :LEL4c_14 :LEL4c_15 :LEL4c_16 :LEL4c_17 :LEL4d :LEL4d_18 :LEL4d_19 :LEL4d_20 :LEL4d_21 :LEL4d_22 :LEL4d_23 :LEL4d_24 :LEL4d_25 :LEL4d_26 :LEL4d_27 :LEL4d_28 :LEL4d_29 :LEL4d_30 :LEL4d_31 :LEL4d_32 :LEL4d_33 :LEL4dAddAttrib :LEL4dAddAttrib_34 :LEL4dAddAttrib_35 :LEL4dAddAttrib_36 :LEL4dAddAttrib_37 :LEL4dAddCopyright :LEL4dAddCopyright_38 :LEL4dAddCopyright_39 :LEL4dAddCopyright_40 :LEL4dAddCopyright_41 :LEL2 :LEL2_42 :LEL2_43 :LEL2_44 :LEL2_45 :LEL2_46 :LEL2_47 :LEL2_48 :LEL2_49 :LEL2_50 :LEL2_51 :LEL2_52 :LEL2_53 :LEL2_54 :LEL2_55 :LEL2_56 :LEL2_57 :LEL2_58 :LEL2_59 :LEL2_60 :LEL2_61 :LEL2_62 :LEL2_63 :LEL3 :LEL3_64 :LEL3_65 :LEL3_66 :LEL3_67 :LEL3_68 :LEL3_69 :LEL3_70 :LEL3_71 :LEL3_72 :LEL3_73 :LEL3_74 :LEL3_75 :LEL3_76 :LEL3_77 :LEL3_78 :LEL5 :LEL5_79 :LEL5_80 :LEL5_81 :LEL5_82 :LEL5_83 :LEL5_84 :LEL6 :LEL6_85 :LEL6_86 :LEL6_87 :LEL6_88 :LEL6_89 :LEL7 :LEL7_90 :LEL7_91 :LEL7_92 :LEL7_93 :LEL7_94 :LEL7_95 :LEL8 :LEL8_96 :LEL8_97 :LEL8_98 :LEL8_99 :LEL8_100 :LEL9 :LEL9_101 :LEL9_102 :LEL9_103 :LEL9_104 :LEL9_105 :LEL9_106)


DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Norm Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU")))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Exr Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU")))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF")))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Nex Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Nex Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Exr Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
) 
