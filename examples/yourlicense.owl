Prefix(:=<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos>

Declaration(Class(:AND))
Declaration(Class(:AtomicSituation))
Declaration(Class(:Duty))
Declaration(Class(:LNOT))
Declaration(Class(:LogicalSituation))
Declaration(Class(:Norm))
Declaration(Class(:OR))
Declaration(Class(:Right))
Declaration(Class(:Situation))
Declaration(Class(:SuperSituation))
Declaration(ObjectProperty(:_contains))
Declaration(ObjectProperty(:activate))
Declaration(ObjectProperty(:and_))
Declaration(ObjectProperty(:not_))
Declaration(ObjectProperty(:or_))
Declaration(ObjectProperty(:satisfy))
Declaration(DataProperty(:Com))
Declaration(DataProperty(:Inc))
Declaration(DataProperty(:Tol))
Declaration(DataProperty(:Vio))
Declaration(DataProperty(:applicable))
Declaration(DataProperty(:hasAF))
Declaration(DataProperty(:hasAT))
Declaration(DataProperty(:hasAU))
Declaration(DataProperty(:hasID))
Declaration(DataProperty(:hasSF))
Declaration(DataProperty(:hasST))
Declaration(DataProperty(:hasSU))
Declaration(DataProperty(:hohfeldType))
Declaration(DataProperty(:satisfied))




############################
#   Classes
############################

# Class: :AND (:AND)

SubClassOf(:AND :LogicalSituation)

# Class: :AtomicSituation (:AtomicSituation)

SubClassOf(:AtomicSituation :Situation)

# Class: :Duty (:Duty)

SubClassOf(:Duty :Norm)

# Class: :LNOT (:LNOT)

SubClassOf(:LNOT :LogicalSituation)

# Class: :LogicalSituation (:LogicalSituation)

SubClassOf(:LogicalSituation :Situation)

# Class: :OR (:OR)

SubClassOf(:OR :LogicalSituation)

# Class: :Right (:Right)

SubClassOf(:Right :Norm)

# Class: :SuperSituation (:SuperSituation)

SubClassOf(:SuperSituation :Situation)


############################
#   Named Individuals
############################




Declaration(NamedIndividual(:YPL4))
# Individual: :YPL4 (:YPL4)
ClassAssertion(:Right :YPL4)
DataPropertyAssertion(:hasID :YPL4 "YPL4"^^xsd:string)
DataPropertyAssertion(:hasDesc :YPL4 "4. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following condition:"^^xsd:string)
Declaration(NamedIndividual(:YPL4_1))
# Individual: :YPL4_1 (:YPL4_1)
ClassAssertion(:AtomicSituation :YPL4_1)
ObjectPropertyAssertion(:satisfy :YPL4_1 :YPL4)
DataPropertyAssertion(:hasID :YPL4_1 "YPL4_1"^^xsd:string)
DataPropertyAssertion(:hasDesc :YPL4_1 "[You reproduced and distributed] copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form"^^xsd:string)
ObjectPropertyAssertion(:_contains :YPL4_2 :YPL4a)
Declaration(NamedIndividual(:YPL4_2))
# Individual: :YPL4_2 (:YPL4_2)
ClassAssertion(:SuperSituation :YPL4_2)
ObjectPropertyAssertion(:activate :YPL4_2 :YPL4)
DataPropertyAssertion(:hasID :YPL4_2 "YPL4_2"^^xsd:string)
DataPropertyAssertion(:hasDesc :YPL4_2 "SS_YPL4a"^^xsd:string)


Declaration(NamedIndividual(:YPL4a))
# Individual: :YPL4a (:YPL4a)
ClassAssertion(:Duty :YPL4a)
DataPropertyAssertion(:hasID :YPL4a "YPL4a"^^xsd:string)
DataPropertyAssertion(:hasDesc :YPL4a "4(a) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work."^^xsd:string)
Declaration(NamedIndividual(:YPL4a_3))
# Individual: :YPL4a_3 (:YPL4a_3)
ClassAssertion(:AtomicSituation :YPL4a_3)
ObjectPropertyAssertion(:satisfy :YPL4a_3 :YPL4a)
DataPropertyAssertion(:hasID :YPL4a_3 "YPL4a_3"^^xsd:string)
DataPropertyAssertion(:hasDesc :YPL4a_3 "[You retained] in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work"^^xsd:string)
Declaration(NamedIndividual(:YPL4a_4))
# Individual: :YPL4a_4 (:YPL4a_4)
ClassAssertion(:AtomicSituation :YPL4a_4)
ObjectPropertyAssertion(:activate :YPL4a_4 :YPL4a)
DataPropertyAssertion(:hasID :YPL4a_4 "YPL4a_4"^^xsd:string)
DataPropertyAssertion(:hasDesc :YPL4a_4 "[You intend to reproduce and distribute copies of the Work or Derivative Works]"^^xsd:string)

DifferentIndividuals( :YPL4 :YPL4_1 :YPL4_2 :YPL4a :YPL4a_3 :YPL4a_4)


DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
) 
