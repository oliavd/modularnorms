Prefix(:=<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos>

Declaration(Class(:AND))
Declaration(Class(:AtomicSituation))
Declaration(Class(:Duty))
Declaration(Class(:LNOT))
Declaration(Class(:LogicalSituation))
Declaration(Class(:Norm))
Declaration(Class(:OR))
Declaration(Class(:Right))
Declaration(Class(:Situation))
Declaration(Class(:SuperSituation))
Declaration(ObjectProperty(:_contains))
Declaration(ObjectProperty(:activate))
Declaration(ObjectProperty(:and_))
Declaration(ObjectProperty(:not_))
Declaration(ObjectProperty(:or_))
Declaration(ObjectProperty(:satisfy))
Declaration(DataProperty(:Com))
Declaration(DataProperty(:Inc))
Declaration(DataProperty(:Tol))
Declaration(DataProperty(:Vio))
Declaration(DataProperty(:applicable))
Declaration(DataProperty(:hasAF))
Declaration(DataProperty(:hasAT))
Declaration(DataProperty(:hasAU))
Declaration(DataProperty(:hasID))
Declaration(DataProperty(:hasSF))
Declaration(DataProperty(:hasST))
Declaration(DataProperty(:hasSU))
Declaration(DataProperty(:hohfeldType))
Declaration(DataProperty(:satisfied))




############################
#   Classes
############################

# Class: :AND (:AND)

SubClassOf(:AND :LogicalSituation)

# Class: :AtomicSituation (:AtomicSituation)

SubClassOf(:AtomicSituation :Situation)

# Class: :Duty (:Duty)

SubClassOf(:Duty :Norm)

# Class: :LNOT (:LNOT)

SubClassOf(:LNOT :LogicalSituation)

# Class: :LogicalSituation (:LogicalSituation)

SubClassOf(:LogicalSituation :Situation)

# Class: :OR (:OR)

SubClassOf(:OR :LogicalSituation)

# Class: :Right (:Right)

SubClassOf(:Right :Norm)

# Class: :SuperSituation (:SuperSituation)

SubClassOf(:SuperSituation :Situation)


############################
#   Named Individuals
############################




Declaration(NamedIndividual(:AGPL2))
# Individual: :AGPL2 (:AGPL2)
ClassAssertion(:Right :AGPL2)
DataPropertyAssertion(:hasID :AGPL2 "AGPL2"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2 "2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions."^^xsd:string)
Declaration(NamedIndividual(:AGPL2_1))
# Individual: :AGPL2_1 (:AGPL2_1)
ClassAssertion(:AtomicSituation :AGPL2_1)
ObjectPropertyAssertion(:satisfy :AGPL2_1 :AGPL2)
DataPropertyAssertion(:hasID :AGPL2_1 "AGPL2_1"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_1 "modify your copy or copies of the Program or any portion of it, ... and copy and distribute such modifications or work"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_2))
# Individual: :AGPL2_2 (:AGPL2_2)
ClassAssertion(:AND :AGPL2_2)
ObjectPropertyAssertion(:activate :AGPL2_2 :AGPL2)
DataPropertyAssertion(:hasID :AGPL2_2 "AGPL2_2"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_2 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_3))
# Individual: :AGPL2_3 (:AGPL2_3)
ClassAssertion(:AtomicSituation :AGPL2_3)
ObjectPropertyAssertion(:and_ :AGPL2_3 :AGPL2_2)
DataPropertyAssertion(:hasID :AGPL2_3 "AGPL2_3"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_3 "under the terms of Section 1"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_4))
# Individual: :AGPL2_4 (:AGPL2_4)
ClassAssertion(:AND :AGPL2_4)
ObjectPropertyAssertion(:and_ :AGPL2_4 :AGPL2_2)
DataPropertyAssertion(:hasID :AGPL2_4 "AGPL2_4"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_4 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_5 :AGPL2a)
Declaration(NamedIndividual(:AGPL2_5))
# Individual: :AGPL2_5 (:AGPL2_5)
ClassAssertion(:SuperSituation :AGPL2_5)
ObjectPropertyAssertion(:and_ :AGPL2_5 :AGPL2_4)
DataPropertyAssertion(:hasID :AGPL2_5 "AGPL2_5"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_5 "SS_AGPL2a"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_6))
# Individual: :AGPL2_6 (:AGPL2_6)
ClassAssertion(:AND :AGPL2_6)
ObjectPropertyAssertion(:and_ :AGPL2_6 :AGPL2_4)
DataPropertyAssertion(:hasID :AGPL2_6 "AGPL2_6"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_6 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_7 :AGPL2b)
Declaration(NamedIndividual(:AGPL2_7))
# Individual: :AGPL2_7 (:AGPL2_7)
ClassAssertion(:SuperSituation :AGPL2_7)
ObjectPropertyAssertion(:and_ :AGPL2_7 :AGPL2_6)
DataPropertyAssertion(:hasID :AGPL2_7 "AGPL2_7"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_7 "SS_AGPL2b"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_8))
# Individual: :AGPL2_8 (:AGPL2_8)
ClassAssertion(:AND :AGPL2_8)
ObjectPropertyAssertion(:and_ :AGPL2_8 :AGPL2_6)
DataPropertyAssertion(:hasID :AGPL2_8 "AGPL2_8"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_8 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_9 :AGPL2c)
Declaration(NamedIndividual(:AGPL2_9))
# Individual: :AGPL2_9 (:AGPL2_9)
ClassAssertion(:SuperSituation :AGPL2_9)
ObjectPropertyAssertion(:and_ :AGPL2_9 :AGPL2_8)
DataPropertyAssertion(:hasID :AGPL2_9 "AGPL2_9"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_9 "SS_AGPL2c"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_10 :AGPL2d)
Declaration(NamedIndividual(:AGPL2_10))
# Individual: :AGPL2_10 (:AGPL2_10)
ClassAssertion(:SuperSituation :AGPL2_10)
ObjectPropertyAssertion(:and_ :AGPL2_10 :AGPL2_8)
DataPropertyAssertion(:hasID :AGPL2_10 "AGPL2_10"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_10 "SS_AGPL2d"^^xsd:string)


Declaration(NamedIndividual(:AGPL2a))
# Individual: :AGPL2a (:AGPL2a)
ClassAssertion(:Duty :AGPL2a)
DataPropertyAssertion(:hasID :AGPL2a "AGPL2a"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2a "2.a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change."^^xsd:string)
Declaration(NamedIndividual(:AGPL2a_11))
# Individual: :AGPL2a_11 (:AGPL2a_11)
ClassAssertion(:AtomicSituation :AGPL2a_11)
ObjectPropertyAssertion(:satisfy :AGPL2a_11 :AGPL2a)
DataPropertyAssertion(:hasID :AGPL2a_11 "AGPL2a_11"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2a_11 "cause the modified files to carry prominent notices stating that you changed the files and the date of any change"^^xsd:string)
Declaration(NamedIndividual(:AGPL2a_12))
# Individual: :AGPL2a_12 (:AGPL2a_12)
ClassAssertion(:AtomicSituation :AGPL2a_12)
ObjectPropertyAssertion(:activate :AGPL2a_12 :AGPL2a)
DataPropertyAssertion(:hasID :AGPL2a_12 "AGPL2a_12"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2a_12 "intent to modify, copy and distribute"^^xsd:string)


Declaration(NamedIndividual(:AGPL2b))
# Individual: :AGPL2b (:AGPL2b)
ClassAssertion(:Duty :AGPL2b)
DataPropertyAssertion(:hasID :AGPL2b "AGPL2b"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2b "2.b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License."^^xsd:string)
Declaration(NamedIndividual(:AGPL2b_13))
# Individual: :AGPL2b_13 (:AGPL2b_13)
ClassAssertion(:AtomicSituation :AGPL2b_13)
ObjectPropertyAssertion(:satisfy :AGPL2b_13 :AGPL2b)
DataPropertyAssertion(:hasID :AGPL2b_13 "AGPL2b_13"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2b_13 "cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License"^^xsd:string)
Declaration(NamedIndividual(:AGPL2b_14))
# Individual: :AGPL2b_14 (:AGPL2b_14)
ClassAssertion(:AtomicSituation :AGPL2b_14)
ObjectPropertyAssertion(:activate :AGPL2b_14 :AGPL2b)
DataPropertyAssertion(:hasID :AGPL2b_14 "AGPL2b_14"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2b_14 "intent to modify, copy and distribute"^^xsd:string)


Declaration(NamedIndividual(:AGPL2c))
# Individual: :AGPL2c (:AGPL2c)
ClassAssertion(:Duty :AGPL2c)
DataPropertyAssertion(:hasID :AGPL2c "AGPL2c"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c "2.c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_15))
# Individual: :AGPL2c_15 (:AGPL2c_15)
ClassAssertion(:AtomicSituation :AGPL2c_15)
ObjectPropertyAssertion(:satisfy :AGPL2c_15 :AGPL2c)
DataPropertyAssertion(:hasID :AGPL2c_15 "AGPL2c_15"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_15 "cause it ... to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_16))
# Individual: :AGPL2c_16 (:AGPL2c_16)
ClassAssertion(:AND :AGPL2c_16)
ObjectPropertyAssertion(:activate :AGPL2c_16 :AGPL2c)
DataPropertyAssertion(:hasID :AGPL2c_16 "AGPL2c_16"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_16 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_17))
# Individual: :AGPL2c_17 (:AGPL2c_17)
ClassAssertion(:AtomicSituation :AGPL2c_17)
ObjectPropertyAssertion(:and_ :AGPL2c_17 :AGPL2c_16)
DataPropertyAssertion(:hasID :AGPL2c_17 "AGPL2c_17"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_17 "intent to modify, copy and distribute"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_18))
# Individual: :AGPL2c_18 (:AGPL2c_18)
ClassAssertion(:OR :AGPL2c_18)
ObjectPropertyAssertion(:and_ :AGPL2c_18 :AGPL2c_16)
DataPropertyAssertion(:hasID :AGPL2c_18 "AGPL2c_18"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_18 "or"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_19))
# Individual: :AGPL2c_19 (:AGPL2c_19)
ClassAssertion(:AtomicSituation :AGPL2c_19)
ObjectPropertyAssertion(:or_ :AGPL2c_19 :AGPL2c_18)
DataPropertyAssertion(:hasID :AGPL2c_19 "AGPL2c_19"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_19 "the modified program normally reads commands interactively when run"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_20))
# Individual: :AGPL2c_20 (:AGPL2c_20)
ClassAssertion(:LNOT :AGPL2c_20)
ObjectPropertyAssertion(:or_ :AGPL2c_20 :AGPL2c_18)
DataPropertyAssertion(:hasID :AGPL2c_20 "AGPL2c_20"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_20 "not"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_21))
# Individual: :AGPL2c_21 (:AGPL2c_21)
ClassAssertion(:AtomicSituation :AGPL2c_21)
ObjectPropertyAssertion(:not_ :AGPL2c_21 :AGPL2c_20)
DataPropertyAssertion(:hasID :AGPL2c_21 "AGPL2c_21"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_21 "Program itself is interactive but does not normally print such an announcement"^^xsd:string)


Declaration(NamedIndividual(:AGPL2d))
# Individual: :AGPL2d (:AGPL2d)
ClassAssertion(:Duty :AGPL2d)
DataPropertyAssertion(:hasID :AGPL2d "AGPL2d"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d "2.d) If the Program as you received it is intended to interact with users through a computer network and if, in the version you received, any user interacting with the Program was given the opportunity to request transmission to that user of the Program's complete source code, you must not remove that facility from your modified version of the Program or work based on the Program, and must offer an equivalent opportunity for all users interacting with your Program through a computer network to request immediate transmission by HTTP of the complete source code of your modified version or other derivative work."^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_22))
# Individual: :AGPL2d_22 (:AGPL2d_22)
ClassAssertion(:AND :AGPL2d_22)
ObjectPropertyAssertion(:satisfy :AGPL2d_22 :AGPL2d)
DataPropertyAssertion(:hasID :AGPL2d_22 "AGPL2d_22"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_22 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_23))
# Individual: :AGPL2d_23 (:AGPL2d_23)
ClassAssertion(:LNOT :AGPL2d_23)
ObjectPropertyAssertion(:and_ :AGPL2d_23 :AGPL2d_22)
DataPropertyAssertion(:hasID :AGPL2d_23 "AGPL2d_23"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_23 "not"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_24))
# Individual: :AGPL2d_24 (:AGPL2d_24)
ClassAssertion(:AtomicSituation :AGPL2d_24)
ObjectPropertyAssertion(:not_ :AGPL2d_24 :AGPL2d_23)
DataPropertyAssertion(:hasID :AGPL2d_24 "AGPL2d_24"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_24 "remove that facility from your modified version of the Program or work based on the Program"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_25))
# Individual: :AGPL2d_25 (:AGPL2d_25)
ClassAssertion(:AtomicSituation :AGPL2d_25)
ObjectPropertyAssertion(:and_ :AGPL2d_25 :AGPL2d_22)
DataPropertyAssertion(:hasID :AGPL2d_25 "AGPL2d_25"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_25 "offer an equivalent opportunity for all users interacting with your Program through a computer network to request immediate transmission by HTTP of the complete source code of your modified version or other derivative work"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_26))
# Individual: :AGPL2d_26 (:AGPL2d_26)
ClassAssertion(:AND :AGPL2d_26)
ObjectPropertyAssertion(:activate :AGPL2d_26 :AGPL2d)
DataPropertyAssertion(:hasID :AGPL2d_26 "AGPL2d_26"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_26 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_27))
# Individual: :AGPL2d_27 (:AGPL2d_27)
ClassAssertion(:AtomicSituation :AGPL2d_27)
ObjectPropertyAssertion(:and_ :AGPL2d_27 :AGPL2d_26)
DataPropertyAssertion(:hasID :AGPL2d_27 "AGPL2d_27"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_27 "intent to modify, copy and distribute"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_28))
# Individual: :AGPL2d_28 (:AGPL2d_28)
ClassAssertion(:AND :AGPL2d_28)
ObjectPropertyAssertion(:and_ :AGPL2d_28 :AGPL2d_26)
DataPropertyAssertion(:hasID :AGPL2d_28 "AGPL2d_28"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_28 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_29))
# Individual: :AGPL2d_29 (:AGPL2d_29)
ClassAssertion(:AtomicSituation :AGPL2d_29)
ObjectPropertyAssertion(:and_ :AGPL2d_29 :AGPL2d_28)
DataPropertyAssertion(:hasID :AGPL2d_29 "AGPL2d_29"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_29 "the Program as you received it is intended to interact with users through a computer network"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_30))
# Individual: :AGPL2d_30 (:AGPL2d_30)
ClassAssertion(:AtomicSituation :AGPL2d_30)
ObjectPropertyAssertion(:and_ :AGPL2d_30 :AGPL2d_28)
DataPropertyAssertion(:hasID :AGPL2d_30 "AGPL2d_30"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_30 "in the version you received, any user interacting with the Program was given the opportunity to request transmission to that user of the Program's complete source code"^^xsd:string)

DifferentIndividuals( :AGPL2 :AGPL2_1 :AGPL2_2 :AGPL2_3 :AGPL2_4 :AGPL2_5 :AGPL2_6 :AGPL2_7 :AGPL2_8 :AGPL2_9 :AGPL2_10 :AGPL2a :AGPL2a_11 :AGPL2a_12 :AGPL2b :AGPL2b_13 :AGPL2b_14 :AGPL2c :AGPL2c_15 :AGPL2c_16 :AGPL2c_17 :AGPL2c_18 :AGPL2c_19 :AGPL2c_20 :AGPL2c_21 :AGPL2d :AGPL2d_22 :AGPL2d_23 :AGPL2d_24 :AGPL2d_25 :AGPL2d_26 :AGPL2d_27 :AGPL2d_28 :AGPL2d_29 :AGPL2d_30)


DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
) 
