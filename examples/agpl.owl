Prefix(:=<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/hsiy/ontologies/2017/2/supernomos>

Declaration(Class(:AND))
Declaration(Class(:AtomicSituation))
Declaration(Class(:Duty))
Declaration(Class(:LNOT))
Declaration(Class(:LogicalSituation))
Declaration(Class(:Norm))
Declaration(Class(:OR))
Declaration(Class(:Right))
Declaration(Class(:Situation))
Declaration(Class(:SuperSituation))
Declaration(ObjectProperty(:_contains))
Declaration(ObjectProperty(:activate))
Declaration(ObjectProperty(:and_))
Declaration(ObjectProperty(:not_))
Declaration(ObjectProperty(:or_))
Declaration(ObjectProperty(:satisfy))
Declaration(DataProperty(:Com))
Declaration(DataProperty(:Inc))
Declaration(DataProperty(:Tol))
Declaration(DataProperty(:Vio))
Declaration(DataProperty(:applicable))
Declaration(DataProperty(:hasAF))
Declaration(DataProperty(:hasAT))
Declaration(DataProperty(:hasAU))
Declaration(DataProperty(:hasID))
Declaration(DataProperty(:hasSF))
Declaration(DataProperty(:hasST))
Declaration(DataProperty(:hasSU))
Declaration(DataProperty(:hohfeldType))
Declaration(DataProperty(:satisfied))




############################
#   Classes
############################

# Class: :AND (:AND)

SubClassOf(:AND :LogicalSituation)

# Class: :AtomicSituation (:AtomicSituation)

SubClassOf(:AtomicSituation :Situation)

# Class: :Duty (:Duty)

SubClassOf(:Duty :Norm)

# Class: :LNOT (:LNOT)

SubClassOf(:LNOT :LogicalSituation)

# Class: :LogicalSituation (:LogicalSituation)

SubClassOf(:LogicalSituation :Situation)

# Class: :OR (:OR)

SubClassOf(:OR :LogicalSituation)

# Class: :Right (:Right)

SubClassOf(:Right :Norm)

# Class: :SuperSituation (:SuperSituation)

SubClassOf(:SuperSituation :Situation)


############################
#   Named Individuals
############################




Declaration(NamedIndividual(:AGPL2))
# Individual: :AGPL2 (:AGPL2)
ClassAssertion(:Right :AGPL2)
DataPropertyAssertion(:hasID :AGPL2 "AGPL2"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2 "2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions. a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) d) If the Program as you received it is intended to interact with users through a computer network and if, in the version you received, any user interacting with the Program was given the opportunity to request transmission to that user of the Program's complete source code, you must not remove that facility from your modified version of the Program or work based on the Program, and must offer an equivalent opportunity for all users interacting with your Program through a computer network to request immediate transmission by HTTP of the complete source code of your modified version or other derivative work. These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License."^^xsd:string)
Declaration(NamedIndividual(:AGPL2_1))
# Individual: :AGPL2_1 (:AGPL2_1)
ClassAssertion(:AtomicSituation :AGPL2_1)
ObjectPropertyAssertion(:satisfy :AGPL2_1 :AGPL2)
DataPropertyAssertion(:hasID :AGPL2_1 "AGPL2_1"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_1 "[you modified] your copy or copies of the Program or any portion of it, ... and [copied and distributed] such modifications or work"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_2))
# Individual: :AGPL2_2 (:AGPL2_2)
ClassAssertion(:AND :AGPL2_2)
ObjectPropertyAssertion(:activate :AGPL2_2 :AGPL2)
DataPropertyAssertion(:hasID :AGPL2_2 "AGPL2_2"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_2 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_3))
# Individual: :AGPL2_3 (:AGPL2_3)
ClassAssertion(:AND :AGPL2_3)
ObjectPropertyAssertion(:and_ :AGPL2_3 :AGPL2_2)
DataPropertyAssertion(:hasID :AGPL2_3 "AGPL2_3"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_3 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_4 :AGPL1a)
Declaration(NamedIndividual(:AGPL2_4))
# Individual: :AGPL2_4 (:AGPL2_4)
ClassAssertion(:SuperSituation :AGPL2_4)
ObjectPropertyAssertion(:and_ :AGPL2_4 :AGPL2_3)
DataPropertyAssertion(:hasID :AGPL2_4 "AGPL2_4"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_4 "SS_AGPL1a"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_5))
# Individual: :AGPL2_5 (:AGPL2_5)
ClassAssertion(:AND :AGPL2_5)
ObjectPropertyAssertion(:and_ :AGPL2_5 :AGPL2_3)
DataPropertyAssertion(:hasID :AGPL2_5 "AGPL2_5"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_5 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_6 :AGPL1b)
Declaration(NamedIndividual(:AGPL2_6))
# Individual: :AGPL2_6 (:AGPL2_6)
ClassAssertion(:SuperSituation :AGPL2_6)
ObjectPropertyAssertion(:and_ :AGPL2_6 :AGPL2_5)
DataPropertyAssertion(:hasID :AGPL2_6 "AGPL2_6"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_6 "SS_AGPL1b"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_7 :AGPL1c)
Declaration(NamedIndividual(:AGPL2_7))
# Individual: :AGPL2_7 (:AGPL2_7)
ClassAssertion(:SuperSituation :AGPL2_7)
ObjectPropertyAssertion(:and_ :AGPL2_7 :AGPL2_5)
DataPropertyAssertion(:hasID :AGPL2_7 "AGPL2_7"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_7 "SS_AGPL1c"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_8))
# Individual: :AGPL2_8 (:AGPL2_8)
ClassAssertion(:AND :AGPL2_8)
ObjectPropertyAssertion(:and_ :AGPL2_8 :AGPL2_2)
DataPropertyAssertion(:hasID :AGPL2_8 "AGPL2_8"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_8 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_9 :AGPL2a)
Declaration(NamedIndividual(:AGPL2_9))
# Individual: :AGPL2_9 (:AGPL2_9)
ClassAssertion(:SuperSituation :AGPL2_9)
ObjectPropertyAssertion(:and_ :AGPL2_9 :AGPL2_8)
DataPropertyAssertion(:hasID :AGPL2_9 "AGPL2_9"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_9 "SS_AGPL2a"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_10))
# Individual: :AGPL2_10 (:AGPL2_10)
ClassAssertion(:AND :AGPL2_10)
ObjectPropertyAssertion(:and_ :AGPL2_10 :AGPL2_8)
DataPropertyAssertion(:hasID :AGPL2_10 "AGPL2_10"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_10 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_11 :AGPL2b)
Declaration(NamedIndividual(:AGPL2_11))
# Individual: :AGPL2_11 (:AGPL2_11)
ClassAssertion(:SuperSituation :AGPL2_11)
ObjectPropertyAssertion(:and_ :AGPL2_11 :AGPL2_10)
DataPropertyAssertion(:hasID :AGPL2_11 "AGPL2_11"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_11 "SS_AGPL2b"^^xsd:string)
Declaration(NamedIndividual(:AGPL2_12))
# Individual: :AGPL2_12 (:AGPL2_12)
ClassAssertion(:AND :AGPL2_12)
ObjectPropertyAssertion(:and_ :AGPL2_12 :AGPL2_10)
DataPropertyAssertion(:hasID :AGPL2_12 "AGPL2_12"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_12 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_13 :AGPL2c)
Declaration(NamedIndividual(:AGPL2_13))
# Individual: :AGPL2_13 (:AGPL2_13)
ClassAssertion(:SuperSituation :AGPL2_13)
ObjectPropertyAssertion(:and_ :AGPL2_13 :AGPL2_12)
DataPropertyAssertion(:hasID :AGPL2_13 "AGPL2_13"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_13 "SS_AGPL2c"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL2_14 :AGPL2d)
Declaration(NamedIndividual(:AGPL2_14))
# Individual: :AGPL2_14 (:AGPL2_14)
ClassAssertion(:SuperSituation :AGPL2_14)
ObjectPropertyAssertion(:and_ :AGPL2_14 :AGPL2_12)
DataPropertyAssertion(:hasID :AGPL2_14 "AGPL2_14"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2_14 "SS_AGPL2d"^^xsd:string)


Declaration(NamedIndividual(:AGPL2a))
# Individual: :AGPL2a (:AGPL2a)
ClassAssertion(:Duty :AGPL2a)
DataPropertyAssertion(:hasID :AGPL2a "AGPL2a"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2a "2.a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change."^^xsd:string)
Declaration(NamedIndividual(:AGPL2a_15))
# Individual: :AGPL2a_15 (:AGPL2a_15)
ClassAssertion(:AtomicSituation :AGPL2a_15)
ObjectPropertyAssertion(:satisfy :AGPL2a_15 :AGPL2a)
DataPropertyAssertion(:hasID :AGPL2a_15 "AGPL2a_15"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2a_15 "[you caused] the modified files to carry prominent notices stating that you changed the files and the date of any change"^^xsd:string)
Declaration(NamedIndividual(:AGPL2a_16))
# Individual: :AGPL2a_16 (:AGPL2a_16)
ClassAssertion(:AtomicSituation :AGPL2a_16)
ObjectPropertyAssertion(:activate :AGPL2a_16 :AGPL2a)
DataPropertyAssertion(:hasID :AGPL2a_16 "AGPL2a_16"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2a_16 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)


Declaration(NamedIndividual(:AGPL2b))
# Individual: :AGPL2b (:AGPL2b)
ClassAssertion(:Duty :AGPL2b)
DataPropertyAssertion(:hasID :AGPL2b "AGPL2b"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2b "2.b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License."^^xsd:string)
Declaration(NamedIndividual(:AGPL2b_17))
# Individual: :AGPL2b_17 (:AGPL2b_17)
ClassAssertion(:AtomicSituation :AGPL2b_17)
ObjectPropertyAssertion(:satisfy :AGPL2b_17 :AGPL2b)
DataPropertyAssertion(:hasID :AGPL2b_17 "AGPL2b_17"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2b_17 "[you caused] any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License"^^xsd:string)
Declaration(NamedIndividual(:AGPL2b_18))
# Individual: :AGPL2b_18 (:AGPL2b_18)
ClassAssertion(:AtomicSituation :AGPL2b_18)
ObjectPropertyAssertion(:activate :AGPL2b_18 :AGPL2b)
DataPropertyAssertion(:hasID :AGPL2b_18 "AGPL2b_18"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2b_18 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)


Declaration(NamedIndividual(:AGPL2c))
# Individual: :AGPL2c (:AGPL2c)
ClassAssertion(:Duty :AGPL2c)
DataPropertyAssertion(:hasID :AGPL2c "AGPL2c"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c "2.c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_19))
# Individual: :AGPL2c_19 (:AGPL2c_19)
ClassAssertion(:AtomicSituation :AGPL2c_19)
ObjectPropertyAssertion(:satisfy :AGPL2c_19 :AGPL2c)
DataPropertyAssertion(:hasID :AGPL2c_19 "AGPL2c_19"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_19 "[you caused the modified program] ... to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_20))
# Individual: :AGPL2c_20 (:AGPL2c_20)
ClassAssertion(:AND :AGPL2c_20)
ObjectPropertyAssertion(:activate :AGPL2c_20 :AGPL2c)
DataPropertyAssertion(:hasID :AGPL2c_20 "AGPL2c_20"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_20 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_21))
# Individual: :AGPL2c_21 (:AGPL2c_21)
ClassAssertion(:AtomicSituation :AGPL2c_21)
ObjectPropertyAssertion(:and_ :AGPL2c_21 :AGPL2c_20)
DataPropertyAssertion(:hasID :AGPL2c_21 "AGPL2c_21"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_21 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_22))
# Individual: :AGPL2c_22 (:AGPL2c_22)
ClassAssertion(:OR :AGPL2c_22)
ObjectPropertyAssertion(:and_ :AGPL2c_22 :AGPL2c_20)
DataPropertyAssertion(:hasID :AGPL2c_22 "AGPL2c_22"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_22 "or"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_23))
# Individual: :AGPL2c_23 (:AGPL2c_23)
ClassAssertion(:AtomicSituation :AGPL2c_23)
ObjectPropertyAssertion(:or_ :AGPL2c_23 :AGPL2c_22)
DataPropertyAssertion(:hasID :AGPL2c_23 "AGPL2c_23"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_23 "the modified program normally reads commands interactively when run"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_24))
# Individual: :AGPL2c_24 (:AGPL2c_24)
ClassAssertion(:LNOT :AGPL2c_24)
ObjectPropertyAssertion(:or_ :AGPL2c_24 :AGPL2c_22)
DataPropertyAssertion(:hasID :AGPL2c_24 "AGPL2c_24"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_24 "not"^^xsd:string)
Declaration(NamedIndividual(:AGPL2c_25))
# Individual: :AGPL2c_25 (:AGPL2c_25)
ClassAssertion(:AtomicSituation :AGPL2c_25)
ObjectPropertyAssertion(:not_ :AGPL2c_25 :AGPL2c_24)
DataPropertyAssertion(:hasID :AGPL2c_25 "AGPL2c_25"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2c_25 "[original] Program itself is interactive but does not normally print such an announcement"^^xsd:string)


Declaration(NamedIndividual(:AGPL2d))
# Individual: :AGPL2d (:AGPL2d)
ClassAssertion(:Duty :AGPL2d)
DataPropertyAssertion(:hasID :AGPL2d "AGPL2d"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d "2.d) If the Program as you received it is intended to interact with users through a computer network and if, in the version you received, any user interacting with the Program was given the opportunity to request transmission to that user of the Program's complete source code, you must not remove that facility from your modified version of the Program or work based on the Program, and must offer an equivalent opportunity for all users interacting with your Program through a computer network to request immediate transmission by HTTP of the complete source code of your modified version or other derivative work."^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_26))
# Individual: :AGPL2d_26 (:AGPL2d_26)
ClassAssertion(:AND :AGPL2d_26)
ObjectPropertyAssertion(:satisfy :AGPL2d_26 :AGPL2d)
DataPropertyAssertion(:hasID :AGPL2d_26 "AGPL2d_26"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_26 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_27))
# Individual: :AGPL2d_27 (:AGPL2d_27)
ClassAssertion(:LNOT :AGPL2d_27)
ObjectPropertyAssertion(:and_ :AGPL2d_27 :AGPL2d_26)
DataPropertyAssertion(:hasID :AGPL2d_27 "AGPL2d_27"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_27 "not"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_28))
# Individual: :AGPL2d_28 (:AGPL2d_28)
ClassAssertion(:AtomicSituation :AGPL2d_28)
ObjectPropertyAssertion(:not_ :AGPL2d_28 :AGPL2d_27)
DataPropertyAssertion(:hasID :AGPL2d_28 "AGPL2d_28"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_28 "[you removed] that facility [to request transmission of source code] from your modified version of the Program or work based on the Program"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_29))
# Individual: :AGPL2d_29 (:AGPL2d_29)
ClassAssertion(:AtomicSituation :AGPL2d_29)
ObjectPropertyAssertion(:and_ :AGPL2d_29 :AGPL2d_26)
DataPropertyAssertion(:hasID :AGPL2d_29 "AGPL2d_29"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_29 "[you offered] an equivalent opportunity for all users interacting with your Program through a computer network to request immediate transmission by HTTP of the complete source code of your modified version or other derivative work"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_30))
# Individual: :AGPL2d_30 (:AGPL2d_30)
ClassAssertion(:AND :AGPL2d_30)
ObjectPropertyAssertion(:activate :AGPL2d_30 :AGPL2d)
DataPropertyAssertion(:hasID :AGPL2d_30 "AGPL2d_30"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_30 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_31))
# Individual: :AGPL2d_31 (:AGPL2d_31)
ClassAssertion(:AtomicSituation :AGPL2d_31)
ObjectPropertyAssertion(:and_ :AGPL2d_31 :AGPL2d_30)
DataPropertyAssertion(:hasID :AGPL2d_31 "AGPL2d_31"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_31 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_32))
# Individual: :AGPL2d_32 (:AGPL2d_32)
ClassAssertion(:AND :AGPL2d_32)
ObjectPropertyAssertion(:and_ :AGPL2d_32 :AGPL2d_30)
DataPropertyAssertion(:hasID :AGPL2d_32 "AGPL2d_32"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_32 "and"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_33))
# Individual: :AGPL2d_33 (:AGPL2d_33)
ClassAssertion(:AtomicSituation :AGPL2d_33)
ObjectPropertyAssertion(:and_ :AGPL2d_33 :AGPL2d_32)
DataPropertyAssertion(:hasID :AGPL2d_33 "AGPL2d_33"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_33 "the [original] Program as you received it is intended to interact with users through a computer network"^^xsd:string)
Declaration(NamedIndividual(:AGPL2d_34))
# Individual: :AGPL2d_34 (:AGPL2d_34)
ClassAssertion(:AtomicSituation :AGPL2d_34)
ObjectPropertyAssertion(:and_ :AGPL2d_34 :AGPL2d_32)
DataPropertyAssertion(:hasID :AGPL2d_34 "AGPL2d_34"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL2d_34 "in the version you received, any user interacting with the [original] Program was given the opportunity to request transmission to that user of the Program's complete source code"^^xsd:string)


Declaration(NamedIndividual(:AGPL1))
# Individual: :AGPL1 (:AGPL1)
ClassAssertion(:Right :AGPL1)
DataPropertyAssertion(:hasID :AGPL1 "AGPL1"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1 "1. You may copy and distribute verbatim copies of the [original] Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program."^^xsd:string)
Declaration(NamedIndividual(:AGPL1_35))
# Individual: :AGPL1_35 (:AGPL1_35)
ClassAssertion(:AtomicSituation :AGPL1_35)
ObjectPropertyAssertion(:satisfy :AGPL1_35 :AGPL1)
DataPropertyAssertion(:hasID :AGPL1_35 "AGPL1_35"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1_35 "[you copied and distributed] verbatim copies of the [original] Program's source code"^^xsd:string)
Declaration(NamedIndividual(:AGPL1_36))
# Individual: :AGPL1_36 (:AGPL1_36)
ClassAssertion(:AND :AGPL1_36)
ObjectPropertyAssertion(:activate :AGPL1_36 :AGPL1)
DataPropertyAssertion(:hasID :AGPL1_36 "AGPL1_36"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1_36 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL1_37 :AGPL1a)
Declaration(NamedIndividual(:AGPL1_37))
# Individual: :AGPL1_37 (:AGPL1_37)
ClassAssertion(:SuperSituation :AGPL1_37)
ObjectPropertyAssertion(:and_ :AGPL1_37 :AGPL1_36)
DataPropertyAssertion(:hasID :AGPL1_37 "AGPL1_37"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1_37 "SS_AGPL1a"^^xsd:string)
Declaration(NamedIndividual(:AGPL1_38))
# Individual: :AGPL1_38 (:AGPL1_38)
ClassAssertion(:AND :AGPL1_38)
ObjectPropertyAssertion(:and_ :AGPL1_38 :AGPL1_36)
DataPropertyAssertion(:hasID :AGPL1_38 "AGPL1_38"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1_38 "and"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL1_39 :AGPL1b)
Declaration(NamedIndividual(:AGPL1_39))
# Individual: :AGPL1_39 (:AGPL1_39)
ClassAssertion(:SuperSituation :AGPL1_39)
ObjectPropertyAssertion(:and_ :AGPL1_39 :AGPL1_38)
DataPropertyAssertion(:hasID :AGPL1_39 "AGPL1_39"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1_39 "SS_AGPL1b"^^xsd:string)
ObjectPropertyAssertion(:_contains :AGPL1_40 :AGPL1c)
Declaration(NamedIndividual(:AGPL1_40))
# Individual: :AGPL1_40 (:AGPL1_40)
ClassAssertion(:SuperSituation :AGPL1_40)
ObjectPropertyAssertion(:and_ :AGPL1_40 :AGPL1_38)
DataPropertyAssertion(:hasID :AGPL1_40 "AGPL1_40"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1_40 "SS_AGPL1c"^^xsd:string)


Declaration(NamedIndividual(:AGPL1a))
# Individual: :AGPL1a (:AGPL1a)
ClassAssertion(:Duty :AGPL1a)
DataPropertyAssertion(:hasID :AGPL1a "AGPL1a"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1a "you [must] conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty"^^xsd:string)
Declaration(NamedIndividual(:AGPL1a_41))
# Individual: :AGPL1a_41 (:AGPL1a_41)
ClassAssertion(:AtomicSituation :AGPL1a_41)
ObjectPropertyAssertion(:satisfy :AGPL1a_41 :AGPL1a)
DataPropertyAssertion(:hasID :AGPL1a_41 "AGPL1a_41"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1a_41 "[you conspicuously and appropriately published] on each copy an appropriate copyright notice and disclaimer of warranty"^^xsd:string)
Declaration(NamedIndividual(:AGPL1a_42))
# Individual: :AGPL1a_42 (:AGPL1a_42)
ClassAssertion(:OR :AGPL1a_42)
ObjectPropertyAssertion(:activate :AGPL1a_42 :AGPL1a)
DataPropertyAssertion(:hasID :AGPL1a_42 "AGPL1a_42"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1a_42 "or"^^xsd:string)
Declaration(NamedIndividual(:AGPL1a_43))
# Individual: :AGPL1a_43 (:AGPL1a_43)
ClassAssertion(:AtomicSituation :AGPL1a_43)
ObjectPropertyAssertion(:or_ :AGPL1a_43 :AGPL1a_42)
DataPropertyAssertion(:hasID :AGPL1a_43 "AGPL1a_43"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1a_43 "[you intend to copy and distribute verbatim copies of the original Program's source code]"^^xsd:string)
Declaration(NamedIndividual(:AGPL1a_44))
# Individual: :AGPL1a_44 (:AGPL1a_44)
ClassAssertion(:AtomicSituation :AGPL1a_44)
ObjectPropertyAssertion(:or_ :AGPL1a_44 :AGPL1a_42)
DataPropertyAssertion(:hasID :AGPL1a_44 "AGPL1a_44"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1a_44 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)


Declaration(NamedIndividual(:AGPL1b))
# Individual: :AGPL1b (:AGPL1b)
ClassAssertion(:Duty :AGPL1b)
DataPropertyAssertion(:hasID :AGPL1b "AGPL1b"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1b "[you must] keep intact all the notices that refer to this License and to the absence of any warranty"^^xsd:string)
Declaration(NamedIndividual(:AGPL1b_45))
# Individual: :AGPL1b_45 (:AGPL1b_45)
ClassAssertion(:AtomicSituation :AGPL1b_45)
ObjectPropertyAssertion(:satisfy :AGPL1b_45 :AGPL1b)
DataPropertyAssertion(:hasID :AGPL1b_45 "AGPL1b_45"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1b_45 "[you kept intact] all the notices that refer to this License and to the absence of any warranty"^^xsd:string)
Declaration(NamedIndividual(:AGPL1b_46))
# Individual: :AGPL1b_46 (:AGPL1b_46)
ClassAssertion(:OR :AGPL1b_46)
ObjectPropertyAssertion(:activate :AGPL1b_46 :AGPL1b)
DataPropertyAssertion(:hasID :AGPL1b_46 "AGPL1b_46"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1b_46 "or"^^xsd:string)
Declaration(NamedIndividual(:AGPL1b_47))
# Individual: :AGPL1b_47 (:AGPL1b_47)
ClassAssertion(:AtomicSituation :AGPL1b_47)
ObjectPropertyAssertion(:or_ :AGPL1b_47 :AGPL1b_46)
DataPropertyAssertion(:hasID :AGPL1b_47 "AGPL1b_47"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1b_47 "[you intend to copy and distribute verbatim copies of the original Program's source code]"^^xsd:string)
Declaration(NamedIndividual(:AGPL1b_48))
# Individual: :AGPL1b_48 (:AGPL1b_48)
ClassAssertion(:AtomicSituation :AGPL1b_48)
ObjectPropertyAssertion(:or_ :AGPL1b_48 :AGPL1b_46)
DataPropertyAssertion(:hasID :AGPL1b_48 "AGPL1b_48"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1b_48 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)


Declaration(NamedIndividual(:AGPL1c))
# Individual: :AGPL1c (:AGPL1c)
ClassAssertion(:Duty :AGPL1c)
DataPropertyAssertion(:hasID :AGPL1c "AGPL1c"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1c "[you must] give any other recipients of the Program a copy of this License along with the Program"^^xsd:string)
Declaration(NamedIndividual(:AGPL1c_49))
# Individual: :AGPL1c_49 (:AGPL1c_49)
ClassAssertion(:AtomicSituation :AGPL1c_49)
ObjectPropertyAssertion(:satisfy :AGPL1c_49 :AGPL1c)
DataPropertyAssertion(:hasID :AGPL1c_49 "AGPL1c_49"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1c_49 "[you gave] any other recipients of the Program a copy of this License along with the Program"^^xsd:string)
Declaration(NamedIndividual(:AGPL1c_50))
# Individual: :AGPL1c_50 (:AGPL1c_50)
ClassAssertion(:OR :AGPL1c_50)
ObjectPropertyAssertion(:activate :AGPL1c_50 :AGPL1c)
DataPropertyAssertion(:hasID :AGPL1c_50 "AGPL1c_50"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1c_50 "or"^^xsd:string)
Declaration(NamedIndividual(:AGPL1c_51))
# Individual: :AGPL1c_51 (:AGPL1c_51)
ClassAssertion(:AtomicSituation :AGPL1c_51)
ObjectPropertyAssertion(:or_ :AGPL1c_51 :AGPL1c_50)
DataPropertyAssertion(:hasID :AGPL1c_51 "AGPL1c_51"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1c_51 "[you intend to copy and distribute verbatim copies of the original Program's source code]"^^xsd:string)
Declaration(NamedIndividual(:AGPL1c_52))
# Individual: :AGPL1c_52 (:AGPL1c_52)
ClassAssertion(:AtomicSituation :AGPL1c_52)
ObjectPropertyAssertion(:or_ :AGPL1c_52 :AGPL1c_50)
DataPropertyAssertion(:hasID :AGPL1c_52 "AGPL1c_52"^^xsd:string)
DataPropertyAssertion(:hasDesc :AGPL1c_52 "[you intend to modify the Program, and copy and distribute such modifications]"^^xsd:string)

DifferentIndividuals( :AGPL2 :AGPL2_1 :AGPL2_2 :AGPL2_3 :AGPL2_4 :AGPL2_5 :AGPL2_6 :AGPL2_7 :AGPL2_8 :AGPL2_9 :AGPL2_10 :AGPL2_11 :AGPL2_12 :AGPL2_13 :AGPL2_14 :AGPL2a :AGPL2a_15 :AGPL2a_16 :AGPL2b :AGPL2b_17 :AGPL2b_18 :AGPL2c :AGPL2c_19 :AGPL2c_20 :AGPL2c_21 :AGPL2c_22 :AGPL2c_23 :AGPL2c_24 :AGPL2c_25 :AGPL2d :AGPL2d_26 :AGPL2d_27 :AGPL2d_28 :AGPL2d_29 :AGPL2d_30 :AGPL2d_31 :AGPL2d_32 :AGPL2d_33 :AGPL2d_34 :AGPL1 :AGPL1_35 :AGPL1_36 :AGPL1_37 :AGPL1_38 :AGPL1_39 :AGPL1_40 :AGPL1a :AGPL1a_41 :AGPL1a_42 :AGPL1a_43 :AGPL1a_44 :AGPL1b :AGPL1b_45 :AGPL1b_46 :AGPL1b_47 :AGPL1b_48 :AGPL1c :AGPL1c_49 :AGPL1c_50 :AGPL1c_51 :AGPL1c_52)


DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:AND Variable(<urn:swrl#o>)) ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:and_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) ClassAtom(:AND Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:and_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Duty Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Duty Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:not_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ClassAtom(:LNOT Variable(<urn:swrl#o>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:activate Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:satisfy Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST")))
DLSafeRule(Body(ClassAtom(:Norm Variable(<urn:swrl#z>)) ClassAtom(:SuperSituation Variable(<urn:swrl#a>)) ObjectPropertyAtom(:_contains Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) DataPropertyAtom(:Vio Variable(<urn:swrl#z>) "true"^^xsd:boolean))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SF")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SF") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#a>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "ST") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "ST")))
DLSafeRule(Body(ObjectPropertyAtom(:or_ Variable(<urn:swrl#a>) Variable(<urn:swrl#o>)) ClassAtom(:Situation Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#a>) "SU") ObjectPropertyAtom(:or_ Variable(<urn:swrl#z>) Variable(<urn:swrl#o>)) DifferentIndividualsAtom(Variable(<urn:swrl#a>) Variable(<urn:swrl#z>)) ClassAtom(:OR Variable(<urn:swrl#o>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") ClassAtom(:Situation Variable(<urn:swrl#a>)))Head(DataPropertyAtom(:satisfied Variable(<urn:swrl#o>) "SU")))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AF") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT") DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SF"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "ST") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Com Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(ClassAtom(:Right Variable(<urn:swrl#z>)) DataPropertyAtom(:satisfied Variable(<urn:swrl#z>) "SU") DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AT"))Head(DataPropertyAtom(:Tol Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
DLSafeRule(Body(DataPropertyAtom(:applicable Variable(<urn:swrl#z>) "AU") ClassAtom(:Right Variable(<urn:swrl#z>)))Head(DataPropertyAtom(:Inc Variable(<urn:swrl#z>) "true"^^xsd:boolean)))
) 
